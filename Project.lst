Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/30/19 00:50:46
Animation exampl					     Page 1 - 1


				TITLE Animation example
				;; http://stackoverflow.com/questions/34217344/clear-screen-without-interrupt

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB Winmm.lib

 00000002			CHARTYPE UNION
 00000000  0000				UnicodeChar    WORD ?
					AsciiChar      DB ?
				CHARTYPE ENDS

 00000004			CHAR_INFO STRUCT
 00000000  0000				Char          CHARTYPE <>
 00000002  0000				Attributes    WORD ?
				CHAR_INFO ENDS

 00000008			SSTRING STRUCT
 00000000  00000000			PtrString DWORD ?
 00000004  0000				TmString  WORD ?
 00000006  0000				CorString WORD ?
				SSTRING ENDS

 00000009			OBSTACULO_FASE STRUCT
 00000000  00				Movimento	  BYTE ? ;//0 estatico, 1 cima, 2 baixo, 3 direita, 4 esquerda
 00000001  00000000			X			  DWORD ? ;//Posicao x
 00000005  00000000			Y			  DWORD ? ;//Posicao y
				OBSTACULO_FASE ENDS

 00000007			DADOS_FASE STRUCT
 00000000  00000000			Endr   DWORD ? ;//Endereço da fase
 00000004  0000				QtdEl  WORD ? ;//Quantidade de elementos na fase
 00000006  00				PosObj BYTE ? ;//Posicao do objetivo na primeira coluna do mapa
				DADOS_FASE ENDS

 = WriteConsoleOutputA		WriteConsoleOutput EQU <WriteConsoleOutputA>

				WriteConsoleOutput PROTO,
				hConsoleOutput : HANDLE,
				    lpBuffer : PTR CHAR_INFO,
				    dwBufferSize : COORD,
				    dwBufferCoord : COORD,
					lpWriteRegion : PTR SMALL_RECT

				CharToBuffer PROTO,
					bufx: DWORD,
					bufy: DWORD,
					char: WORD,
					cor:  WORD

				LimpaBuffer PROTO,
					elBuff: WORD,
					crBuff: WORD

				StringParaBuffer PROTO,
					endString: DWORD,
					stX:	   DWORD,
					stY:       DWORD,
					corSt:     WORD

				ExibeMenu PROTO,
					endMenu: DWORD,
					tamMenu: BYTE

				RenderScene PROTO,
				    addrFase: DWORD,
					tFase:	  WORD,
					psObj:	  BYTE

				ChecaColisao PROTO,
				    px:	DWORD,
				    py: DWORD

				MovimentaJogador PROTO, 
					px: DWORD,
					py: DWORD

				AtualizaFase PROTO, 
					pFase: DWORD,
					cFase: WORD,
					pObj:  BYTE

				AtualizaObstaculo PROTO,
					pObstaculo: DWORD

				PlaySound PROTO,
				    pszSound: PTR BYTE,
				    hmod:	  DWORD,
				    fdwSound: DWORD


 00000000			.data
 00000000 44 65 76 69 63	    deviceConnect BYTE "DeviceConnect", 0
	   65 43 6F 6E 6E
	   65 63 74 00

 0000000E 00010000		    SND_ALIAS    DWORD 00010000h
 00000012 00040005		    SND_RESOURCE DWORD 00040005h
 00000016 00020000		    SND_FILENAME DWORD 00020000h
 0000001A 00000001		    SND_ASYNC    DWORD 00000001h

 0000001E 63 6F 6C 69 73	    fail BYTE "colisao.wav", 0
	   61 6F 2E 77 61
	   76 00
 0000002A 70 5F 66 61 73		prox_fasew BYTE "p_fase.wav", 0
	   65 2E 77 61 76
	   00
 00000035 66 69 6D 5F 6A		congrats BYTE "fim_jogo.wav", 0
	   6F 67 6F 2E 77
	   61 76 00


 = 00000078				COLS = 120;//Quantidade de colunas do mapa
 = 0000001E				ROWS = 30;//Quantidade de linhas do mapa
 = 0000006F				COR_OBSTACULO = 6Fh;//Cor dos elementos do buffer
 = 00000060				COR_FUNDO = 60h
 = 0000006B				COR_OBJETIVO = 6Bh
 = 00000064				COR_PERSONAGEM = 64h
 = 0000000F				COR_MENU = 0Fh
 = 00000006				COR_RODAPE = 06h
 = 00000020				ELEMENTO_FUNDO = ' '
 = 00000023				ELEMENTO_OBSTACULO = '#'
 = 0000004F				ELEMENTO_OBJETIVO = 'O'
 = 000000FE				ELEMENTO_PERSONAGEM = 0FEh
 00000042 00FE				character WORD 0FEh;//Personagem principal
 = 00000077				INI_X = COLS - 1
 = 0000000F				INI_Y = 15


 00000044 20 00				sBLine     BYTE " ", 0
 = 00000044				addrBLine = OFFSET sBLine
 = 00000001				cpBLine = LENGTHOF sBLine - 1
 00000046 4C 41 42 72 69		sRdp	   BYTE "LABrinto - 2019", 0
	   6E 74 6F 20 2D
	   20 32 30 31 39
	   00
 = 00000046				addrRdp = OFFSET sRdp
 = 00000010				cpRdp = LENGTHOF sRdp
 00000056 50 6F 72 20 4A		sRdp2	   BYTE "Por Joao Gabriel Coli e Vitor Hugo Chaves", 0
	   6F 61 6F 20 47
	   61 62 72 69 65
	   6C 20 43 6F 6C
	   69 20 65 20 56
	   69 74 6F 72 20
	   48 75 67 6F 20
	   43 68 61 76 65
	   73 00
 = 00000056				addrRdp2 = OFFSET sRdp2
 = 0000002A				cpRdp2 = LENGTHOF sRdp2

 00000080 4D 65 6E 75 3A		sMenu      BYTE "Menu:", 0
	   00
 00000086 4A 6F 67 61 72		sMenuJogar BYTE "Jogar (J)", 0
	   20 28 4A 29 00
 00000090 56 69 73 75 61		sMenuInst  BYTE "Visualizar instrucoes (I)", 0
	   6C 69 7A 61 72
	   20 69 6E 73 74
	   72 75 63 6F 65
	   73 20 28 49 29
	   00
 000000AA 53 61 69 72 20		sMenuSair  BYTE "Sair do jogo (S)", 0
	   64 6F 20 6A 6F
	   67 6F 20 28 53
	   29 00
 000000BB 00000080 R 0005		aMenu      SSTRING <OFFSET sMenu, LENGTHOF sMenu - 1, COR_MENU>, <addrBLine, cpBLine, COR_MENU>,
	   000F 00000044 R
	   0001 000F
	   00000086 R
	   0009 000F
	   00000090 R
	   0019 000F
	   000000AA R
	   0010 000F
	   00000044 R
	   0001 000F
	   00000046 R
	   0010 0006
	   00000056 R
	   002A 0006
									   <OFFSET sMenuJogar, LENGTHOF sMenuJogar - 1, COR_MENU>,
									   <OFFSET sMenuInst, LENGTHOF sMenuInst - 1, COR_MENU>, <OFFSET sMenusair, LENGTHOF sMenuSair - 1, COR_MENU>,
									   <addrBLine, cpBLine, COR_MENU>, <addrRdp, cpRdp, COR_RODAPE>,
									   <addrRdp2, cpRdp2, COR_RODAPE>

 000000FB 49 6E 73 74 72		sInstrucoes BYTE "Instrucoes:", 0
	   75 63 6F 65 73
	   3A 00
 00000107 4F 20 6F 62 6A		sInstL1     BYTE "O objetivo do jogo e chegar ao final do LABrinto, representado", 0
	   65 74 69 76 6F
	   20 64 6F 20 6A
	   6F 67 6F 20 65
	   20 63 68 65 67
	   61 72 20 61 6F
	   20 66 69 6E 61
	   6C 20 64 6F 20
	   4C 41 42 72 69
	   6E 74 6F 2C 20
	   72 65 70 72 65
	   73 65 6E 74 61
	   64 6F 00
 00000146 20 70 65 6C 6F		sInstL2		BYTE " pelo caracter O ao final do mapa.", 0
	   20 63 61 72 61
	   63 74 65 72 20
	   4F 20 61 6F 20
	   66 69 6E 61 6C
	   20 64 6F 20 6D
	   61 70 61 2E 00
 00000169 41 20 6D 6F 76		sInstL3     BYTE "A movimentacao do personagem principal, ", ELEMENTO_PERSONAGEM, ", se da com o uso das setas direcionais.", 0
	   69 6D 65 6E 74
	   61 63 61 6F 20
	   64 6F 20 70 65
	   72 73 6F 6E 61
	   67 65 6D 20 70
	   72 69 6E 63 69
	   70 61 6C 2C 20
	   FE 2C 20 73 65
	   20 64 61 20 63
	   6F 6D 20 6F 20
	   75 73 6F 20 64
	   61 73 20 73 65
	   74 61 73 20 64
	   69 72 65 63 69
	   6F 6E 61 69 73
	   2E 00
 000001BB 43 6F 6C 69 64		sInstL4     BYTE "Colidir com qualquer obstaculo, ", ELEMENTO_OBSTACULO, ", ocasiona no reinicio do jogo.", 0
	   69 72 20 63 6F
	   6D 20 71 75 61
	   6C 71 75 65 72
	   20 6F 62 73 74
	   61 63 75 6C 6F
	   2C 20 23 2C 20
	   6F 63 61 73 69
	   6F 6E 61 20 6E
	   6F 20 72 65 69
	   6E 69 63 69 6F
	   20 64 6F 20 6A
	   6F 67 6F 2E 00
 000001FC 56 65 6E 63 65		sInstL5     BYTE "Vence aquele que conseguir passar por todas as fases.", 0
	   20 61 71 75 65
	   6C 65 20 71 75
	   65 20 63 6F 6E
	   73 65 67 75 69
	   72 20 70 61 73
	   73 61 72 20 70
	   6F 72 20 74 6F
	   64 61 73 20 61
	   73 20 66 61 73
	   65 73 2E 00
 00000232 53 61 69 72 20		sInstL6     BYTE "Sair (S)", 0
	   28 53 29 00
 0000023B 000000FB R 000B		aInstrucoes SSTRING <OFFSET sInstrucoes, LENGTHOF sInstrucoes - 1, COR_MENU>, <addrBLine, cpBLine, COR_MENU>,
	   000F 00000044 R
	   0001 000F
	   00000107 R
	   003E 000F
	   00000146 R
	   0022 000F
	   00000169 R
	   0051 000F
	   000001BB R
	   0040 000F
	   000001FC R
	   0035 000F
	   00000044 R
	   0001 000F
	   00000232 R
	   0008 000F
										<OFFSET sInstL1, LENGTHOF sInstL1 - 1, COR_MENU>, <OFFSET sInstL2, LENGTHOF sInstL2 - 1, COR_MENU>,
										<OFFSET sInstL3, LENGTHOF sInstL3 - 1, COR_MENU>, <OFFSET sInstL4, LENGTHOF sInstL4 - 1, COR_MENU>, 
										<OFFSET sInstL5, LENGTHOF sInstL5 - 1, COR_MENU>, <addrBLine, cpBLine, COR_MENU>,
										<OFFSET sInstL6, LENGTHOF sInstL6 - 1, COR_MENU>

 00000283 4F 62 72 69 67		sCrdtL1 BYTE "Obrigado por jogar!", 0
	   61 64 6F 20 70
	   6F 72 20 6A 6F
	   67 61 72 21 00
 00000297 4F 20 4C 41 42		sCrdtL2 BYTE "O LABrinto foi desenvolvido para a disciplina a disciplina de", 0
	   72 69 6E 74 6F
	   20 66 6F 69 20
	   64 65 73 65 6E
	   76 6F 6C 76 69
	   64 6F 20 70 61
	   72 61 20 61 20
	   64 69 73 63 69
	   70 6C 69 6E 61
	   20 61 20 64 69
	   73 63 69 70 6C
	   69 6E 61 20 64
	   65 00
 000002D5 4C 61 62 6F 72		sCrdtL3 BYTE "Laboratorio de Arquitetura e Organizacao de Computadores 2,", 0
	   61 74 6F 72 69
	   6F 20 64 65 20
	   41 72 71 75 69
	   74 65 74 75 72
	   61 20 65 20 4F
	   72 67 61 6E 69
	   7A 61 63 61 6F
	   20 64 65 20 43
	   6F 6D 70 75 74
	   61 64 6F 72 65
	   73 20 32 2C 00
 00000311 6D 69 6E 69 73		sCrdtL4 BYTE "ministrada pelo Prof. Dr. Luciano Neris.", 0
	   74 72 61 64 61
	   20 70 65 6C 6F
	   20 50 72 6F 66
	   2E 20 44 72 2E
	   20 4C 75 63 69
	   61 6E 6F 20 4E
	   65 72 69 73 2E
	   00
 0000033A 4D 61 79 20 74		sCrdtL5 BYTE "May the force be with you.", 0
	   68 65 20 66 6F
	   72 63 65 20 62
	   65 20 77 69 74
	   68 20 79 6F 75
	   2E 00
 00000355 50 72 65 73 73		sCrdtL6 BYTE "Pressione qualquer tecla para sair.", 0
	   69 6F 6E 65 20
	   71 75 61 6C 71
	   75 65 72 20 74
	   65 63 6C 61 20
	   70 61 72 61 20
	   73 61 69 72 2E
	   00
 00000379 00000283 R 0013		aCreditos SSTRING <OFFSET sCrdtL1, LENGTHOF sCrdtL1 - 1, COR_MENU>, <OFFSET sCrdtL2, LENGTHOF sCrdtL2 - 1, COR_MENU>,
	   000F 00000297 R
	   003D 000F
	   000002D5 R
	   003B 000F
	   00000311 R
	   0028 000F
	   0000033A R
	   001A 000F
	   00000044 R
	   0001 000F
	   00000355 R
	   0023 000F
	   00000044 R
	   0001 000F
	   00000046 R
	   0010 0006
	   00000056 R
	   002A 0006
								      <OFFSET sCrdtL3, LENGTHOF sCrdtL3 - 1, COR_MENU>, <OFFSET sCrdtL4, LENGTHOF sCrdtL4 - 1, COR_MENU>,
									  <OFFSET sCrdtL5, LENGTHOF sCrdtL5 - 1, COR_MENU>, <addrBLine, cpBLine, COR_MENU>,
									  <OFFSET sCrdtL6, LENGTHOF sCrdtL6 - 1, COR_MENU>, <addrBLine, cpBLine, COR_MENU>,
									  <addrRdp, cpRdp, COR_RODAPE>, <addrRdp2, cpRdp2, COR_RODAPE>


 000003C9 01 00000005		fase1 OBSTACULO_FASE <1d, 5d, 15d>, <2d, 13d, 15d>, <1d, 15d, 15d>, <2d, 21d, 15d>, <1d, 25d, 15d>, <2d, 33d, 15d>,
	   0000000F 02
	   0000000D
	   0000000F 01
	   0000000F
	   0000000F 02
	   00000015
	   0000000F 01
	   00000019
	   0000000F 02
	   00000021
	   0000000F 01
	   00000026
	   0000000F 02
	   00000028
	   0000000F 02
	   0000004D
	   0000000F 01
	   0000004B
	   0000000F 02
	   00000057
	   0000000F 01
	   00000059
	   0000000F 02
	   0000005F
	   0000000F 01
	   00000063
	   0000000F 02
	   00000067
	   0000000F 01
	   0000006E
	   0000000F
						<1d, 38d, 15d>, <2d, 40d, 15d>, <2d, 77d, 15d>, <1d, 75d, 15d>, <2d, 87d, 15d>, <1d, 89d, 15d>, <2d, 95d, 15d>,
						<1d, 99d, 15d>, <2d, 103d, 15d>, <1d, 110d, 15d>

 00000459 01 00000005			fase2 OBSTACULO_FASE <1d, 5d, 15d>, <2d, 6d, 15d>, <1d, 7d, 15d>, <2d, 8d, 15d>, <1d, 9d, 15d>, <2d, 10d, 15d>,
	   0000000F 02
	   00000006
	   0000000F 01
	   00000007
	   0000000F 02
	   00000008
	   0000000F 01
	   00000009
	   0000000F 02
	   0000000A
	   0000000F 01
	   00000039
	   00000008 02
	   0000003A
	   00000008 01
	   0000003B
	   00000008 02
	   0000003C
	   00000008 01
	   0000003D
	   00000008 02
	   0000003E
	   00000008 01
	   00000069
	   00000019 02
	   0000006A
	   00000019 01
	   0000006B
	   00000019 02
	   0000006C
	   00000019 01
	   0000006D
	   00000019 02
	   0000006E
	   00000019
						<1d, 57d, 8d>, <2d, 58d, 8d>, <1d, 59d, 8d>, <2d, 60d, 8d>, <1d, 61d, 8d>, <2d, 62d, 8d>,
						<1d, 105d, 25d>, <2d, 106d, 25d>, <1d, 107d, 25d>, <2d, 108d, 25d>, <1d, 109d, 25d>, <2d, 110d, 25d>

 000004FB 01 00000005		     fase3 OBSTACULO_FASE <1d, 5d, 15d>, <2d, 7d, 15d>, <1d, 9d, 15d>,  <2d, 11d, 15d>, <1d, 13d, 15d>, <2d, 15d, 15d>,
	   0000000F 02
	   00000007
	   0000000F 01
	   00000009
	   0000000F 02
	   0000000B
	   0000000F 01
	   0000000D
	   0000000F 02
	   0000000F
	   0000000F 01
	   00000011
	   0000000F 02
	   00000013
	   0000000F 01
	   00000015
	   0000000F 02
	   00000017
	   0000000F 01
	   00000019
	   0000000F 02
	   0000001B
	   0000000F 01
	   0000001D
	   0000000F 02
	   0000001F
	   0000000F 01
	   00000021
	   0000000F 02
	   00000023
	   0000000F 01
	   00000025
	   0000000F 02
	   00000027
	   0000000F 01
	   00000029
	   0000000F 02
	   0000002B
	   0000000F 01
	   0000002D
	   0000000F 02
	   0000002F
	   0000000F
					    <1d, 17d, 15d>, <2d, 19d, 15d>, <1d, 21d, 15d>, <2d, 23d, 15d>, <1d, 25d, 15d>, <2d, 27d, 15d>,<1d, 29d, 15d>,
					    <2d, 31d, 15d>, <1d, 33d, 15d>,  <2d, 35d, 15d>, <1d, 37d, 15d>, <2d, 39d, 15d>, <1d, 41d, 15d>, <2d, 43d, 15d>,
					    <1d, 45d, 15d>, <2d, 47d, 15d>

 000005C1 000003C9 R 0010		fases DADOS_FASE <OFFSET fase1, LENGTHOF fase1, 4d>, <OFFSET fase2, LENGTHOF fase2, 18d>, <OFFSET fase3, LENGTHOF fase3, 15d>
	   04 00000459 R
	   0012 12
	   000004FB R
	   0016 0F


 000005D6 00000000		    console HANDLE 0
 000005DA  00000E10 [		    buffer CHAR_INFO ROWS * COLS DUP(<<ELEMENTO_FUNDO>, COR_FUNDO>)
	    0020 0060
	   ]
 00003E1A 0078 001E		    bufferSize COORD <COLS, ROWS>
 00003E1E 0000 0000		    bufferCoord COORD <0, 0>
 00003E22 0000 0000 0077	    region SMALL_RECT <0, 0, COLS - 1, ROWS - 1>
	   001D

 00003E2A 00000077		    x DWORD INI_X; current position
 00003E2E 0000000F		    y DWORD INI_Y; of the figure


 00000000			.code
 00000000			main PROC
					
				    INVOKE PlaySound, OFFSET deviceConnect, NULL, SND_ALIAS ;//Configuracao para que haja sons
 00000000  FF 35 0000000E R *	    push   SND_ALIAS
 00000006  6A 00	   *	    push   +000000000h
 00000008  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: deviceConnect
 0000000D  E8 00000000 E   *	    call   PlaySound
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000012  6A F5	   *	    push    -00000000Bh
 00000014  E8 00000000 E   *	    call   GetStdHandle
 00000019  A3 000005D6 R	    mov console, eax; save console handle

 0000001E				ESTADO_MENU:
					INVOKE ExibeMenu, OFFSET aMenu, LENGTHOF aMenu
 0000001E  6A 08	   *	    push   +000000008h
 00000020  68 000000BB R   *	    push   dword  ptr OFFSET FLAT: aMenu
 00000025  E8 000002EB	   *	    call   ExibeMenu
					INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 0000002A  68 00003E22 R   *	    push   OFFSET region
 0000002F  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 00000035  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 0000003B  68 000005DA R   *	    push   OFFSET buffer
 00000040  FF 35 000005D6 R *	    push   console
 00000046  E8 00000000 E   *	    call   WriteConsoleOutputA
 0000004B					AGUARDA_MSG_MENU:
 0000004B  E8 00000278				call LeTecla
 00000050  3C 6A				cmp al, 'j'
 00000052  0F 84 000000A4			jz ESTADO_CONTAGEM
 00000058  3C 69				cmp al, 'i'
 0000005A  74 0A				jz ESTADO_INSTRUCOES
 0000005C  3C 73				cmp al, 's'
 0000005E  0F 84 00000203			jz SAIR
 00000064  EB E5				jmp AGUARDA_MSG_MENU

 00000066				ESTADO_INSTRUCOES:
					INVOKE ExibeMenu, OFFSET aInstrucoes, LENGTHOF aInstrucoes
 00000066  6A 09	   *	    push   +000000009h
 00000068  68 0000023B R   *	    push   dword  ptr OFFSET FLAT: aInstrucoes
 0000006D  E8 000002A3	   *	    call   ExibeMenu
					INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 00000072  68 00003E22 R   *	    push   OFFSET region
 00000077  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 0000007D  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 00000083  68 000005DA R   *	    push   OFFSET buffer
 00000088  FF 35 000005D6 R *	    push   console
 0000008E  E8 00000000 E   *	    call   WriteConsoleOutputA
 00000093					AGUARDA_MSG_INSTRUCOES:
 00000093  E8 00000230				call LeTecla
 00000098  3C 73				cmp al, 's'
 0000009A  74 82				jz ESTADO_MENU
 0000009C  EB F5				jmp AGUARDA_MSG_INSTRUCOES


 0000009E				ESTADO_CREDITOS:
						INVOKE PlaySound, NULL, NULL, SND_ASYNC
 0000009E  FF 35 0000001A R *	    push   SND_ASYNC
 000000A4  6A 00	   *	    push   +000000000h
 000000A6  6A 00	   *	    push   +000000000h
 000000A8  E8 00000000 E   *	    call   PlaySound
						INVOKE PlaySound, OFFSET congrats, NULL, SND_ASYNC
 000000AD  FF 35 0000001A R *	    push   SND_ASYNC
 000000B3  6A 00	   *	    push   +000000000h
 000000B5  68 00000035 R   *	    push   dword  ptr OFFSET FLAT: congrats
 000000BA  E8 00000000 E   *	    call   PlaySound
						INVOKE ExibeMenu, OFFSET aCreditos, LENGTHOF aCreditos
 000000BF  6A 0A	   *	    push   +00000000Ah
 000000C1  68 00000379 R   *	    push   dword  ptr OFFSET FLAT: aCreditos
 000000C6  E8 0000024A	   *	    call   ExibeMenu
						INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 000000CB  68 00003E22 R   *	    push   OFFSET region
 000000D0  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 000000D6  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 000000DC  68 000005DA R   *	    push   OFFSET buffer
 000000E1  FF 35 000005D6 R *	    push   console
 000000E7  E8 00000000 E   *	    call   WriteConsoleOutputA
 000000EC					AGUARDA_MSG_CREDITOS:
 000000EC  E8 000001D7				call LeTecla
 000000F1  83 F8 00					cmp eax, 0
 000000F4  0F 85 FFFFFF24				jne ESTADO_MENU
 000000FA  EB F0					jmp AGUARDA_MSG_CREDITOS

 000000FC				ESTADO_CONTAGEM:
					INVOKE LimpaBuffer, 0, COR_MENU
 000000FC  6A 0F	   *	    push   +00000000Fh
 000000FE  6A 00	   *	    push   +000000000h
 00000100  E8 00000193	   *	    call   LimpaBuffer
 00000105  BE 00000005			mov esi, 5
 0000010A					REGRESSIVA:
 0000010A  8B C6				mov eax, esi
 0000010C  83 C0 30				add eax, 30h
						INVOKE CharToBuffer, ((COLS - 1) / 2), ((ROWS - 1) / 2), ax, COR_MENU
 0000010F  6A 0F	   *	    push   +00000000Fh
 00000111  83 EC 02	   *	    sub    esp, 002h
 00000114  66| 50	   *	    push   ax
 00000116  6A 0E	   *	    push   +00000000Eh
 00000118  6A 3B	   *	    push   +00000003Bh
 0000011A  E8 000002BF	   *	    call   CharToBuffer
						INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 0000011F  68 00003E22 R   *	    push   OFFSET region
 00000124  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 0000012A  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 00000130  68 000005DA R   *	    push   OFFSET buffer
 00000135  FF 35 000005D6 R *	    push   console
 0000013B  E8 00000000 E   *	    call   WriteConsoleOutputA
						INVOKE Sleep, 900
 00000140  68 00000384	   *	    push   +000000384h
 00000145  E8 00000000 E   *	    call   Sleep
 0000014A  4E					dec esi
 0000014B  83 FE 01				cmp esi, 1
 0000014E  7D BA				jge REGRESSIVA
					

 00000150				ESTADO_JOGO:
					INVOKE LimpaBuffer, ELEMENTO_FUNDO, COR_FUNDO
 00000150  6A 60	   *	    push   +000000060h
 00000152  6A 20	   *	    push   +000000020h
 00000154  E8 0000013F	   *	    call   LimpaBuffer
 00000159					LOOP_JOGO:
						INVOKE RenderScene, (DADOS_FASE PTR fases[esi]).Endr, (DADOS_FASE PTR fases[esi]).qtdEl, (DADOS_FASE PTR fases[esi]).PosObj
 00000159  8A 86 000005C7 R *	    mov    al, byte  ptr fases[esi]+006h
 0000015F  50		   *	    push   eax
 00000160  83 EC 02	   *	    sub    esp, 002h
 00000163  66| FF B6
	   000005C5 R	   *	    push   word  ptr fases[esi]+00004h
 0000016A  FF B6 000005C1 R *	    push   dword  ptr fases[esi]
 00000170  E8 00000380	   *	    call   RenderScene
 00000175  E8 0000014E				call LeTecla
 0000017A  3C 73				cmp al, 's'
 0000017C  0F 84 FFFFFE9C			jz ESTADO_MENU
						INVOKE MovimentaJogador, OFFSET x, OFFSET y
 00000182  68 00003E2E R   *	    push   dword  ptr OFFSET FLAT: y
 00000187  68 00003E2A R   *	    push   dword  ptr OFFSET FLAT: x
 0000018C  E8 00000389	   *	    call   MovimentaJogador
						INVOKE ChecaColisao, x, y
 00000191  FF 35 00003E2E R *	    push   y
 00000197  FF 35 00003E2A R *	    push   x
 0000019D  E8 000003BF	   *	    call   ChecaColisao
 000001A2  83 F8 00				cmp eax, 0
 000001A5  74 37				jz CONTINUE
 000001A7  83 F8 01				cmp eax, 1
 000001AA  74 02				jz REINICIA
 000001AC  EB 73				jmp ESTADO_TROCA_FASE

 000001AE						REINICIA:
 000001AE  C7 05 00003E2A R				mov x, INI_X
	   00000077
 000001B8  C7 05 00003E2E R				mov y, INI_Y
	   0000000F
							INVOKE PlaySound, OFFSET fail, NULL, SND_ASYNC
 000001C2  FF 35 0000001A R *	    push   SND_ASYNC
 000001C8  6A 00	   *	    push   +000000000h
 000001CA  68 0000001E R   *	    push   dword  ptr OFFSET FLAT: fail
 000001CF  E8 00000000 E   *	    call   PlaySound
 000001D4  BE 00000000					mov esi, 0
 000001D9  E9 FFFFFF72					jmp ESTADO_JOGO

 000001DE					CONTINUE:
						INVOKE CharToBuffer, x, y, character, COR_PERSONAGEM;//Imprime o personagem em sua posicao atual
 000001DE  6A 64	   *	    push   +000000064h
 000001E0  83 EC 02	   *	    sub    esp, 002h
 000001E3  66| FF 35
	   00000042 R	   *	    push   character
 000001EA  FF 35 00003E2E R *	    push   y
 000001F0  FF 35 00003E2A R *	    push   x
 000001F6  E8 000001E3	   *	    call   CharToBuffer
						INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 000001FB  68 00003E22 R   *	    push   OFFSET region
 00000200  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 00000206  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 0000020C  68 000005DA R   *	    push   OFFSET buffer
 00000211  FF 35 000005D6 R *	    push   console
 00000217  E8 00000000 E   *	    call   WriteConsoleOutputA
 0000021C  E9 FFFFFF38				jmp LOOP_JOGO

 00000221				ESTADO_TROCA_FASE:
 00000221  83 C6 07			add esi, SIZEOF DADOS_FASE
 00000224  83 FE 08			cmp esi, 8
 00000227  0F 83 FFFFFE71		jae ESTADO_CREDITOS
 0000022D  C7 05 00003E2A R		mov x, INI_X
	   00000077
 00000237  C7 05 00003E2E R		mov y, INI_Y
	   0000000F
					INVOKE PlaySound,NULL,NULL,SND_ASYNC
 00000241  FF 35 0000001A R *	    push   SND_ASYNC
 00000247  6A 00	   *	    push   +000000000h
 00000249  6A 00	   *	    push   +000000000h
 0000024B  E8 00000000 E   *	    call   PlaySound
					INVOKE PlaySound, OFFSET prox_fasew, NULL, SND_ASYNC
 00000250  FF 35 0000001A R *	    push   SND_ASYNC
 00000256  6A 00	   *	    push   +000000000h
 00000258  68 0000002A R   *	    push   dword  ptr OFFSET FLAT: prox_fasew
 0000025D  E8 00000000 E   *	    call   PlaySound
 00000262  E9 FFFFFEE9			jmp ESTADO_JOGO

 00000267				SAIR:
					INVOKE LimpaBuffer, 0, COR_MENU
 00000267  6A 0F	   *	    push   +00000000Fh
 00000269  6A 00	   *	    push   +000000000h
 0000026B  E8 00000028	   *	    call   LimpaBuffer
					INVOKE WriteConsoleOutput, console, ADDR buffer, bufferSize, bufferCoord, ADDR region
 00000270  68 00003E22 R   *	    push   OFFSET region
 00000275  FF 35 00003E1E R *	    push   dword  ptr bufferCoord
 0000027B  FF 35 00003E1A R *	    push   dword  ptr bufferSize
 00000281  68 000005DA R   *	    push   OFFSET buffer
 00000286  FF 35 000005D6 R *	    push   console
 0000028C  E8 00000000 E   *	    call   WriteConsoleOutputA

					exit
 00000291  6A 00	   *	    push   +000000000h
 00000293  E8 00000000 E   *	    call   ExitProcess
 00000298			main ENDP


 00000298			LimpaBuffer PROC USES eax esi elBuff: WORD, crBuff: WORD
 00000298  55		   *	    push   ebp
 00000299  8B EC	   *	    mov    ebp, esp
 0000029B  50		   *	    push   eax
 0000029C  56		   *	    push   esi
 0000029D  B8 00000E10			mov eax, (COLS * ROWS)
 000002A2  BE 00000000			mov esi, 0

 000002A7				LP1:
					INVOKE CharToBuffer, esi, 0, elBuff, crBuff
 000002A7  83 EC 02	   *	    sub    esp, 002h
 000002AA  66| FF 75 0C	   *	    push   word  ptr ss:[ebp]+0000Ch
 000002AE  83 EC 02	   *	    sub    esp, 002h
 000002B1  66| FF 75 08	   *	    push   word  ptr ss:[ebp]+00008h
 000002B5  6A 00	   *	    push   +000000000h
 000002B7  56		   *	    push   esi
 000002B8  E8 00000121	   *	    call   CharToBuffer
 000002BD  46				inc esi
 000002BE  3B F0			cmp esi, eax
 000002C0  72 E5			jb LP1

					ret
 000002C2  5E		   *	    pop    esi
 000002C3  58		   *	    pop    eax
 000002C4  C9		   *	    leave  
 000002C5  C2 0008	   *	    ret    00008h
 000002C8			LimpaBuffer ENDP


 000002C8			LeTecla PROC
 000002C8  B8 00000019			mov eax, 25
 000002CD  E8 00000000 E		call Delay
 000002D2  E8 00000000 E		call ReadKey
 000002D7  74 01			jz SEM_TECLA

 000002D9				RETORNA:
 000002D9  C3				ret

 000002DA				SEM_TECLA:
 000002DA  B8 00000000			mov eax, 0
 000002DF  EB F8			jmp RETORNA
 000002E1			LeTecla ENDP

 000002E1			StringParaBuffer PROC USES edx esi eax endString: DWORD, stX: DWORD, stY: DWORD, corSt: WORD
 000002E1  55		   *	    push   ebp
 000002E2  8B EC	   *	    mov    ebp, esp
 000002E4  52		   *	    push   edx
 000002E5  56		   *	    push   esi
 000002E6  50		   *	    push   eax
 000002E7  8B 55 08			mov edx, endString
 000002EA  8B 75 0C			mov esi, stX

 000002ED				ETP1:
 000002ED  0F B6 02			movzx eax, BYTE PTR [edx]
 000002F0  83 F8 00			cmp eax, 0
 000002F3  74 19			je ENDST
					INVOKE CharToBuffer, esi, stY, ax, corSt
 000002F5  83 EC 02	   *	    sub    esp, 002h
 000002F8  66| FF 75 14	   *	    push   word  ptr ss:[ebp]+00014h
 000002FC  83 EC 02	   *	    sub    esp, 002h
 000002FF  66| 50	   *	    push   ax
 00000301  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 00000304  56		   *	    push   esi
 00000305  E8 000000D4	   *	    call   CharToBuffer
 0000030A  42				inc edx
 0000030B  46				inc esi
 0000030C  EB DF			jmp ETP1

 0000030E				ENDST:
					ret
 0000030E  58		   *	    pop    eax
 0000030F  5E		   *	    pop    esi
 00000310  5A		   *	    pop    edx
 00000311  C9		   *	    leave  
 00000312  C2 0010	   *	    ret    00010h
 00000315			StringParaBuffer ENDP

 00000315			ExibeMenu PROC USES eax esi edx ecx endMenu: DWORD, tamMenu: BYTE
 00000315  55		   *	    push   ebp
 00000316  8B EC	   *	    mov    ebp, esp
 00000318  50		   *	    push   eax
 00000319  56		   *	    push   esi
 0000031A  52		   *	    push   edx
 0000031B  51		   *	    push   ecx
					INVOKE LimpaBuffer, 0, COR_MENU
 0000031C  6A 0F	   *	    push   +00000000Fh
 0000031E  6A 00	   *	    push   +000000000h
 00000320  E8 FFFFFF73	   *	    call   LimpaBuffer

 00000325  8B 45 08			mov eax, endMenu
 00000328  0F B6 75 0C			movzx esi, tamMenu
 0000032C  4E				dec esi

 0000032D				LPSt:
 0000032D  8B 14 F0			mov edx, DWORD PTR (SSTRING PTR [eax + esi * SSTRING]).PtrString
 00000330  B9 00000078			mov ecx, COLS
 00000335  66| 2B 4C F0			sub cx, WORD PTR (SSTRING PTR [eax + esi * SSTRING]).TmString
	   04
 0000033A  D1 E9			shr ecx, 1
					INVOKE StringParaBuffer, edx, ecx, esi, (SSTRING PTR[eax + esi * SSTRING]).CorString
 0000033C  83 EC 02	   *	    sub    esp, 002h
 0000033F  66| FF 74 F0
	   06		   *	    push   word  ptr [eax+esi*8]+00006h
 00000344  56		   *	    push   esi
 00000345  51		   *	    push   ecx
 00000346  52		   *	    push   edx
 00000347  E8 FFFFFF95	   *	    call   StringParaBuffer
 0000034C				CTN:
 0000034C  4E				dec esi
 0000034D  83 FE 00			cmp esi, 0
 00000350  7D DB			jge LPSt

					ret
 00000352  59		   *	    pop    ecx
 00000353  5A		   *	    pop    edx
 00000354  5E		   *	    pop    esi
 00000355  58		   *	    pop    eax
 00000356  C9		   *	    leave  
 00000357  C2 0008	   *	    ret    00008h
 0000035A			ExibeMenu ENDP


 0000035A			MontaGridMapa PROC USES eax ecx edx
 0000035A  50		   *	    push   eax
 0000035B  51		   *	    push   ecx
 0000035C  52		   *	    push   edx
 0000035D  33 C0		    xor eax, eax	;//EAX = 0

 0000035F				LINHA1:
 0000035F  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   000005DA R
	   0023
 00000369  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   000005DC R
	   006F
 00000373  40				inc eax
 00000374  83 F8 78			cmp eax, COLS
 00000377  7C E6			jl LINHA1

 00000379				COLUNAS:
 00000379  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   000005DA R
	   0023
 00000383  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   000005DC R
	   006F
 0000038D  83 C0 77			add eax, COLS-1
 00000390  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   000005DA R
	   0023
 0000039A  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   000005DC R
	   006F
 000003A4  40				inc eax
 000003A5  3D 00000D5E			cmp eax, (ROWS - 1)*(COLS - 2)
 000003AA  7C CD			jl COLUNAS

 000003AC				LINHANROWS:
 000003AC  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   000005DA R
	   0023
 000003B6  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   000005DC R
	   006F
 000003C0  40				inc eax
 000003C1  3D 00000E10			cmp eax, ROWS*COLS
 000003C6  7C E4			jl LINHANROWS

					;//Remove o obstáculo da posição inicial
 000003C8  66| C7 05			mov buffer[((INI_Y + 1) * COLS - 1) * CHAR_INFO].Char, ELEMENTO_FUNDO
	   000023D6 R
	   0020
 000003D1  66| C7 05			mov buffer[((INI_Y + 1) * COLS - 1) * CHAR_INFO].Attributes, COR_FUNDO
	   000023D8 R
	   0060


				    ret
 000003DA  5A		   *	    pop    edx
 000003DB  59		   *	    pop    ecx
 000003DC  58		   *	    pop    eax
 000003DD  C3		   *	    ret    00000h
 000003DE			MontaGridMapa ENDP


 000003DE			CharToBuffer PROC USES eax edx bufx: DWORD, bufy: DWORD, char: WORD, cor: WORD
 000003DE  55		   *	    push   ebp
 000003DF  8B EC	   *	    mov    ebp, esp
 000003E1  50		   *	    push   eax
 000003E2  52		   *	    push   edx
 000003E3  8B 45 0C		    mov eax, bufy
 000003E6  BA 00000078		    mov edx, COLS
 000003EB  F7 E2		    mul edx
 000003ED  03 45 08		    add eax, bufx
 000003F0  66| 8B 55 10		    mov dx, char
 000003F4  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Char, dx
	   000005DA R
 000003FC  66| 8B 55 14			mov dx, cor
 00000400  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Attributes, dx
	   000005DC R
				    ret
 00000408  5A		   *	    pop    edx
 00000409  58		   *	    pop    eax
 0000040A  C9		   *	    leave  
 0000040B  C2 0010	   *	    ret    00010h
 0000040E			CharToBuffer ENDP


 0000040E			AtualizaFase PROC USES eax ecx edx pFase: DWORD, cFase: WORD, pObj: BYTE
 0000040E  55		   *	    push   ebp
 0000040F  8B EC	   *	    mov    ebp, esp
 00000411  50		   *	    push   eax
 00000412  51		   *	    push   ecx
 00000413  52		   *	    push   edx
 00000414  B8 00000078			mov eax, COLS
 00000419  0F B6 55 10			movzx edx, pObj
 0000041D  F7 E2			mul edx
 0000041F  8B 55 08			mov edx, pFase
 00000422  8B 4D 0C			mov ecx, DWORD PTR cFase

 00000425				ATUALIZACAO:
					INVOKE CharToBuffer, DWORD PTR (OBSTACULO_FASE PTR [edx]).X, DWORD PTR (OBSTACULO_FASE PTR [edx]).Y, ELEMENTO_FUNDO, COR_FUNDO ;//Limpa a posição antiga
 00000425  6A 60	   *	    push   +000000060h
 00000427  6A 20	   *	    push   +000000020h
 00000429  FF 72 05	   *	    push   dword  ptr [edx]+000000005h
 0000042C  FF 72 01	   *	    push   dword  ptr [edx]+000000001h
 0000042F  E8 FFFFFFAA	   *	    call   CharToBuffer
					INVOKE AtualizaObstaculo, edx ;//Atualiza a posição do obstáculo
 00000434  52		   *	    push   edx
 00000435  E8 0000002F	   *	    call   AtualizaObstaculo
					INVOKE CharToBuffer, (OBSTACULO_FASE PTR [edx]).X, DWORD PTR (OBSTACULO_FASE PTR [edx]).Y, ELEMENTO_OBSTACULO, COR_OBSTACULO
 0000043A  6A 6F	   *	    push   +00000006Fh
 0000043C  6A 23	   *	    push   +000000023h
 0000043E  FF 72 05	   *	    push   dword  ptr [edx]+000000005h
 00000441  FF 72 01	   *	    push   dword  ptr [edx]+000000001h
 00000444  E8 FFFFFF95	   *	    call   CharToBuffer
 00000449  83 C2 09			add edx, TYPE OBSTACULO_FASE
 0000044C  E2 D7			loop ATUALIZACAO

					;//Bloco do objetivo
 0000044E  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBJETIVO
	   000005DA R
	   004F
 00000458  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBJETIVO
	   000005DC R
	   006B

					ret
 00000462  5A		   *	    pop    edx
 00000463  59		   *	    pop    ecx
 00000464  58		   *	    pop    eax
 00000465  C9		   *	    leave  
 00000466  C2 000C	   *	    ret    0000Ch
 00000469			AtualizaFase ENDP

 00000469			AtualizaObstaculo PROC USES eax edx ecx ebx esi pObstaculo: DWORD

 00000469  55		   *	    push   ebp
 0000046A  8B EC	   *	    mov    ebp, esp
 0000046C  50		   *	    push   eax
 0000046D  52		   *	    push   edx
 0000046E  51		   *	    push   ecx
 0000046F  53		   *	    push   ebx
 00000470  56		   *	    push   esi
 00000471  8B 55 08			mov edx, pObstaculo

 00000474  8B 5A 01			mov ebx, DWORD PTR(OBSTACULO_FASE PTR[edx]).X
 00000477  8B 4A 05			mov ecx, DWORD PTR(OBSTACULO_FASE PTR[edx]).Y
 0000047A  0F B6 32			movzx esi, BYTE PTR (OBSTACULO_FASE PTR [edx]).Movimento
 0000047D  83 FE 00			cmp esi, 0
 00000480  74 14			jz case0
 00000482  83 FE 01			cmp esi, 1
 00000485  74 11			jz case1
 00000487  83 FE 02			cmp esi, 2
 0000048A  74 20			jz case2
 0000048C  83 FE 03			cmp esi, 3
 0000048F  74 2F			jz case3
 00000491  83 FE 04			cmp esi, 4
 00000494  74 3E			jz case4


 00000496				case0:
 00000496  EB 4E			jmp FIM

 00000498				case1:
 00000498  41				inc ecx
					INVOKE ChecaColisao, ebx, ecx
 00000499  51		   *	    push   ecx
 0000049A  53		   *	    push   ebx
 0000049B  E8 000000C1	   *	    call   ChecaColisao
 000004A0  83 F8 00			cmp eax, 0
 000004A3  75 02			jnz INVERTEY

 000004A5  EB 3F			jmp FIM

 000004A7					INVERTEY:
 000004A7  C6 02 02				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 02h
 000004AA  EB 3A				jmp FIM

 000004AC				case2:
 000004AC  49				dec ecx
					INVOKE ChecaColisao, ebx, ecx
 000004AD  51		   *	    push   ecx
 000004AE  53		   *	    push   ebx
 000004AF  E8 000000AD	   *	    call   ChecaColisao
 000004B4  83 F8 00			cmp eax, 0
 000004B7  75 02			jnz INVERTEY2

 000004B9  EB 2B			jmp FIM

 000004BB					INVERTEY2:
 000004BB  C6 02 01				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 01h
 000004BE  EB 26				jmp FIM

 000004C0				case3:
 000004C0  43				inc ebx
					INVOKE ChecaColisao, ebx, ecx
 000004C1  51		   *	    push   ecx
 000004C2  53		   *	    push   ebx
 000004C3  E8 00000099	   *	    call   ChecaColisao
 000004C8  83 F8 00			cmp eax, 0
 000004CB  75 02			jnz INVERTEX

 000004CD  EB 17			jmp FIM

 000004CF					INVERTEX:
 000004CF  C6 02 04				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 04h
 000004D2  EB 12				jmp FIM

 000004D4				case4:
 000004D4  4B				dec ebx
					INVOKE ChecaColisao, ebx, ecx
 000004D5  51		   *	    push   ecx
 000004D6  53		   *	    push   ebx
 000004D7  E8 00000085	   *	    call   ChecaColisao
 000004DC  83 F8 00			cmp eax, 0
 000004DF  75 02			jnz INVERTEX2

 000004E1  EB 03			jmp FIM

 000004E3					INVERTEX2:
 000004E3  C6 02 03				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 03h


 000004E6				FIM:
 000004E6  89 5A 01			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 000004E9  89 4A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
					ret
 000004EC  5E		   *	    pop    esi
 000004ED  5B		   *	    pop    ebx
 000004EE  59		   *	    pop    ecx
 000004EF  5A		   *	    pop    edx
 000004F0  58		   *	    pop    eax
 000004F1  C9		   *	    leave  
 000004F2  C2 0004	   *	    ret    00004h
 000004F5			AtualizaObstaculo ENDP

 000004F5			RenderScene PROC USES eax edx ecx addrFase: DWORD, tFase: WORD, psObj: BYTE
 000004F5  55		   *	    push   ebp
 000004F6  8B EC	   *	    mov    ebp, esp
 000004F8  50		   *	    push   eax
 000004F9  52		   *	    push   edx
 000004FA  51		   *	    push   ecx
 000004FB  E8 FFFFFE5A		    call MontaGridMapa ;//Grid padrao do mapa
					INVOKE AtualizaFase, addrFase, tFase, psObj ;//Fase e movimentacao dos obstaculos
 00000500  8A 45 10	   *	    mov    al, byte  ptr ss:[ebp]+010h
 00000503  50		   *	    push   eax
 00000504  83 EC 02	   *	    sub    esp, 002h
 00000507  66| FF 75 0C	   *	    push   word  ptr ss:[ebp]+0000Ch
 0000050B  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000050E  E8 FFFFFEFB	   *	    call   AtualizaFase
				    ret
 00000513  59		   *	    pop    ecx
 00000514  5A		   *	    pop    edx
 00000515  58		   *	    pop    eax
 00000516  C9		   *	    leave  
 00000517  C2 000C	   *	    ret    0000Ch

 0000051A			RenderScene ENDP

 0000051A			MovimentaJogador PROC USES ecx edx px: DWORD, py: DWORD
					
 0000051A  55		   *	    push   ebp
 0000051B  8B EC	   *	    mov    ebp, esp
 0000051D  51		   *	    push   ecx
 0000051E  52		   *	    push   edx
 0000051F  83 F8 00			cmp eax, 0
 00000522  74 37			jz RESUME

 00000524  8B 55 0C			mov edx, py
 00000527  8B 4D 08			mov ecx, px

					INVOKE CharToBuffer, [ecx], [edx], ELEMENTO_FUNDO, COR_FUNDO ;//Limpa posicao atual
 0000052A  6A 60	   *	    push   +000000060h
 0000052C  6A 20	   *	    push   +000000020h
 0000052E  FF 32	   *	    push   dword  ptr [edx]
 00000530  FF 31	   *	    push   dword  ptr [ecx]
 00000532  E8 FFFFFEA7	   *	    call   CharToBuffer

 00000537  80 FC 50			cmp ah, 50h
 0000053A  74 1D			jz INCREMENTO_Y ;//Cima
 0000053C  80 FC 48			cmp ah, 48h
 0000053F  74 0C			jz DECREMENTO_Y ;//Baixo
 00000541  80 FC 4D			cmp ah, 4Dh
 00000544  74 0F			jz INCREMENTO_X ;//Direita
 00000546  80 FC 4B			cmp ah, 4Bh
 00000549  74 06			jz DECREMENTO_X ;//Esquerda
 0000054B  EB 0E			jmp RESUME

 0000054D				DECREMENTO_Y :
 0000054D  FF 0A			dec DWORD PTR [edx]
 0000054F  EB 0A			jmp RESUME

 00000551				DECREMENTO_X :
 00000551  FF 09			dec DWORD PTR[ecx]
 00000553  EB 06			jmp RESUME

 00000555				INCREMENTO_X :
 00000555  FF 01			inc DWORD PTR[ecx]
 00000557  EB 02			jmp RESUME

 00000559				INCREMENTO_Y :
 00000559  FF 02			inc DWORD PTR[edx]

 0000055B				RESUME:
					ret
 0000055B  5A		   *	    pop    edx
 0000055C  59		   *	    pop    ecx
 0000055D  C9		   *	    leave  
 0000055E  C2 0008	   *	    ret    00008h
 00000561			MovimentaJogador ENDP

 00000561			ChecaColisao PROC USES edx ecx px: DWORD, py: DWORD
 00000561  55		   *	    push   ebp
 00000562  8B EC	   *	    mov    ebp, esp
 00000564  52		   *	    push   edx
 00000565  51		   *	    push   ecx
 00000566  8B 45 0C		    mov eax, py
 00000569  BA 00000078		    mov edx, COLS
 0000056E  F7 E2		    mul edx
 00000570  03 45 08		    add eax, px
 00000573  0F B7 0C 85			movzx ecx, buffer[eax * CHAR_INFO].Char
	   000005DA R
 0000057B  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, ' '
	   000005DA R 20
 00000584  74 22		    jz NAO_COLIDIU
 00000586  66| 81 3C 85		    cmp buffer[eax * CHAR_INFO].Char, 0FEh ;//Garantir que o personagem nao 'colida' consigo mesmo
	   000005DA R
	   00FE
 00000590  74 16		    jz NAO_COLIDIU
 00000592  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   000005DA R 23
 0000059B  74 12		    jz COLIDIU_OBSTACULO
 0000059D  B8 00000002		    mov eax, 2 ;//Colidiu com o objetivo
 000005A2			RESUME2:
				    ret
 000005A2  59		   *	    pop    ecx
 000005A3  5A		   *	    pop    edx
 000005A4  C9		   *	    leave  
 000005A5  C2 0008	   *	    ret    00008h

 000005A8			NAO_COLIDIU:
 000005A8  B8 00000000		    mov eax, 0
 000005AD  EB F3		    jmp RESUME2

 000005AF			COLIDIU_OBSTACULO:
 000005AF  B8 00000001		    mov eax, 1
 000005B4  EB EC		    jmp RESUME2


 000005B6			ChecaColisao ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/30/19 00:50:46
Animation exampl					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CHARTYPE . . . . . . . . . . . .	 00000002
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
CHAR_INFO  . . . . . . . . . . .	 00000004
  Char . . . . . . . . . . . . .	 00000000	 Word
  Attributes . . . . . . . . . .	 00000002	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
DADOS_FASE . . . . . . . . . . .	 00000007
  Endr . . . . . . . . . . . . .	 00000000	 DWord
  QtdEl  . . . . . . . . . . . .	 00000004	 Word
  PosObj . . . . . . . . . . . .	 00000006	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
OBSTACULO_FASE . . . . . . . . .	 00000009
  Movimento  . . . . . . . . . .	 00000000	 Byte
  X  . . . . . . . . . . . . . .	 00000001	 DWord
  Y  . . . . . . . . . . . . . .	 00000005	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SSTRING  . . . . . . . . . . . .	 00000008
  PtrString  . . . . . . . . . .	 00000000	 DWord
  TmString . . . . . . . . . . .	 00000004	 Word
  CorString  . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003E32 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005B6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaFase . . . . . . . . . .	P Near	 0000040E _TEXT	Length= 0000005B Public STDCALL
  pFase  . . . . . . . . . . . .	DWord	 bp + 00000008
  cFase  . . . . . . . . . . . .	Word	 bp + 0000000C
  pObj . . . . . . . . . . . . .	Byte	 bp + 00000010
  ATUALIZACAO  . . . . . . . . .	L Near	 00000425 _TEXT	
AtualizaObstaculo  . . . . . . .	P Near	 00000469 _TEXT	Length= 0000008C Public STDCALL
  pObstaculo . . . . . . . . . .	DWord	 bp + 00000008
  case0  . . . . . . . . . . . .	L Near	 00000496 _TEXT	
  case1  . . . . . . . . . . . .	L Near	 00000498 _TEXT	
  INVERTEY . . . . . . . . . . .	L Near	 000004A7 _TEXT	
  case2  . . . . . . . . . . . .	L Near	 000004AC _TEXT	
  INVERTEY2  . . . . . . . . . .	L Near	 000004BB _TEXT	
  case3  . . . . . . . . . . . .	L Near	 000004C0 _TEXT	
  INVERTEX . . . . . . . . . . .	L Near	 000004CF _TEXT	
  case4  . . . . . . . . . . . .	L Near	 000004D4 _TEXT	
  INVERTEX2  . . . . . . . . . .	L Near	 000004E3 _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 000004E6 _TEXT	
CharToBuffer . . . . . . . . . .	P Near	 000003DE _TEXT	Length= 00000030 Public STDCALL
  bufx . . . . . . . . . . . . .	DWord	 bp + 00000008
  bufy . . . . . . . . . . . . .	DWord	 bp + 0000000C
  char . . . . . . . . . . . . .	Word	 bp + 00000010
  cor  . . . . . . . . . . . . .	Word	 bp + 00000014
ChecaColisao . . . . . . . . . .	P Near	 00000561 _TEXT	Length= 00000055 Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  RESUME2  . . . . . . . . . . .	L Near	 000005A2 _TEXT	
  NAO_COLIDIU  . . . . . . . . .	L Near	 000005A8 _TEXT	
  COLIDIU_OBSTACULO  . . . . . .	L Near	 000005AF _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExibeMenu  . . . . . . . . . . .	P Near	 00000315 _TEXT	Length= 00000045 Public STDCALL
  endMenu  . . . . . . . . . . .	DWord	 bp + 00000008
  tamMenu  . . . . . . . . . . .	Byte	 bp + 0000000C
  LPSt . . . . . . . . . . . . .	L Near	 0000032D _TEXT	
  CTN  . . . . . . . . . . . . .	L Near	 0000034C _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LeTecla  . . . . . . . . . . . .	P Near	 000002C8 _TEXT	Length= 00000019 Public STDCALL
  RETORNA  . . . . . . . . . . .	L Near	 000002D9 _TEXT	
  SEM_TECLA  . . . . . . . . . .	L Near	 000002DA _TEXT	
LimpaBuffer  . . . . . . . . . .	P Near	 00000298 _TEXT	Length= 00000030 Public STDCALL
  elBuff . . . . . . . . . . . .	Word	 bp + 00000008
  crBuff . . . . . . . . . . . .	Word	 bp + 0000000C
  LP1  . . . . . . . . . . . . .	L Near	 000002A7 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MontaGridMapa  . . . . . . . . .	P Near	 0000035A _TEXT	Length= 00000084 Public STDCALL
  LINHA1 . . . . . . . . . . . .	L Near	 0000035F _TEXT	
  COLUNAS  . . . . . . . . . . .	L Near	 00000379 _TEXT	
  LINHANROWS . . . . . . . . . .	L Near	 000003AC _TEXT	
MovimentaJogador . . . . . . . .	P Near	 0000051A _TEXT	Length= 00000047 Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  DECREMENTO_Y . . . . . . . . .	L Near	 0000054D _TEXT	
  DECREMENTO_X . . . . . . . . .	L Near	 00000551 _TEXT	
  INCREMENTO_X . . . . . . . . .	L Near	 00000555 _TEXT	
  INCREMENTO_Y . . . . . . . . .	L Near	 00000559 _TEXT	
  RESUME . . . . . . . . . . . .	L Near	 0000055B _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySound  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RenderScene  . . . . . . . . . .	P Near	 000004F5 _TEXT	Length= 00000025 Public STDCALL
  addrFase . . . . . . . . . . .	DWord	 bp + 00000008
  tFase  . . . . . . . . . . . .	Word	 bp + 0000000C
  psObj  . . . . . . . . . . . .	Byte	 bp + 00000010
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringParaBuffer . . . . . . . .	P Near	 000002E1 _TEXT	Length= 00000034 Public STDCALL
  endString  . . . . . . . . . .	DWord	 bp + 00000008
  stX  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  stY  . . . . . . . . . . . . .	DWord	 bp + 00000010
  corSt  . . . . . . . . . . . .	Word	 bp + 00000014
  ETP1 . . . . . . . . . . . . .	L Near	 000002ED _TEXT	
  ENDST  . . . . . . . . . . . .	L Near	 0000030E _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputA  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000298 Public STDCALL
  ESTADO_MENU  . . . . . . . . .	L Near	 0000001E _TEXT	
  AGUARDA_MSG_MENU . . . . . . .	L Near	 0000004B _TEXT	
  ESTADO_INSTRUCOES  . . . . . .	L Near	 00000066 _TEXT	
  AGUARDA_MSG_INSTRUCOES . . . .	L Near	 00000093 _TEXT	
  ESTADO_CREDITOS  . . . . . . .	L Near	 0000009E _TEXT	
  AGUARDA_MSG_CREDITOS . . . . .	L Near	 000000EC _TEXT	
  ESTADO_CONTAGEM  . . . . . . .	L Near	 000000FC _TEXT	
  REGRESSIVA . . . . . . . . . .	L Near	 0000010A _TEXT	
  ESTADO_JOGO  . . . . . . . . .	L Near	 00000150 _TEXT	
  LOOP_JOGO  . . . . . . . . . .	L Near	 00000159 _TEXT	
  REINICIA . . . . . . . . . . .	L Near	 000001AE _TEXT	
  CONTINUE . . . . . . . . . . .	L Near	 000001DE _TEXT	
  ESTADO_TROCA_FASE  . . . . . .	L Near	 00000221 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000267 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000078h   
COR_FUNDO  . . . . . . . . . . .	Number	 00000060h   
COR_MENU . . . . . . . . . . . .	Number	 0000000Fh   
COR_OBJETIVO . . . . . . . . . .	Number	 0000006Bh   
COR_OBSTACULO  . . . . . . . . .	Number	 0000006Fh   
COR_PERSONAGEM . . . . . . . . .	Number	 00000064h   
COR_RODAPE . . . . . . . . . . .	Number	 00000006h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ELEMENTO_FUNDO . . . . . . . . .	Number	 00000020h   
ELEMENTO_OBJETIVO  . . . . . . .	Number	 0000004Fh   
ELEMENTO_OBSTACULO . . . . . . .	Number	 00000023h   
ELEMENTO_PERSONAGEM  . . . . . .	Number	 000000FEh   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INI_X  . . . . . . . . . . . . .	Number	 00000077h   
INI_Y  . . . . . . . . . . . . .	Number	 0000000Fh   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 0000001Eh   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ALIAS  . . . . . . . . . . .	DWord	 0000000E _DATA	
SND_ASYNC  . . . . . . . . . . .	DWord	 0000001A _DATA	
SND_FILENAME . . . . . . . . . .	DWord	 00000016 _DATA	
SND_RESOURCE . . . . . . . . . .	DWord	 00000012 _DATA	
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsoleOutput . . . . . . .	Text   	 WriteConsoleOutputA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aCreditos  . . . . . . . . . . .	SSTRING	 00000379 _DATA	
aInstrucoes  . . . . . . . . . .	SSTRING	 0000023B _DATA	
aMenu  . . . . . . . . . . . . .	SSTRING	 000000BB _DATA	
addrBLine  . . . . . . . . . . .	Number	 00000044h   
addrRdp2 . . . . . . . . . . . .	Number	 00000056h   
addrRdp  . . . . . . . . . . . .	Number	 00000046h   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferCoord  . . . . . . . . . .	COORD	 00003E1E _DATA	
bufferSize . . . . . . . . . . .	COORD	 00003E1A _DATA	
buffer . . . . . . . . . . . . .	CHAR_INFO  000005DA _DATA	
character  . . . . . . . . . . .	Word	 00000042 _DATA	
congrats . . . . . . . . . . . .	Byte	 00000035 _DATA	
console  . . . . . . . . . . . .	DWord	 000005D6 _DATA	
cpBLine  . . . . . . . . . . . .	Number	 00000001h   
cpRdp2 . . . . . . . . . . . . .	Number	 0000002Ah   
cpRdp  . . . . . . . . . . . . .	Number	 00000010h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deviceConnect  . . . . . . . . .	Byte	 00000000 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 0000001E _DATA	
fase1  . . . . . . . . . . . . .	OBSTACULO_FASE  000003C9 _DATA	
fase2  . . . . . . . . . . . . .	OBSTACULO_FASE  00000459 _DATA	
fase3  . . . . . . . . . . . . .	OBSTACULO_FASE  000004FB _DATA	
fases  . . . . . . . . . . . . .	DADOS_FASE  000005C1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prox_fasew . . . . . . . . . . .	Byte	 0000002A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
region . . . . . . . . . . . . .	SMALL_RECT  00003E22 _DATA	
sBLine . . . . . . . . . . . . .	Byte	 00000044 _DATA	
sCrdtL1  . . . . . . . . . . . .	Byte	 00000283 _DATA	
sCrdtL2  . . . . . . . . . . . .	Byte	 00000297 _DATA	
sCrdtL3  . . . . . . . . . . . .	Byte	 000002D5 _DATA	
sCrdtL4  . . . . . . . . . . . .	Byte	 00000311 _DATA	
sCrdtL5  . . . . . . . . . . . .	Byte	 0000033A _DATA	
sCrdtL6  . . . . . . . . . . . .	Byte	 00000355 _DATA	
sInstL1  . . . . . . . . . . . .	Byte	 00000107 _DATA	
sInstL2  . . . . . . . . . . . .	Byte	 00000146 _DATA	
sInstL3  . . . . . . . . . . . .	Byte	 00000169 _DATA	
sInstL4  . . . . . . . . . . . .	Byte	 000001BB _DATA	
sInstL5  . . . . . . . . . . . .	Byte	 000001FC _DATA	
sInstL6  . . . . . . . . . . . .	Byte	 00000232 _DATA	
sInstrucoes  . . . . . . . . . .	Byte	 000000FB _DATA	
sMenuInst  . . . . . . . . . . .	Byte	 00000090 _DATA	
sMenuJogar . . . . . . . . . . .	Byte	 00000086 _DATA	
sMenuSair  . . . . . . . . . . .	Byte	 000000AA _DATA	
sMenu  . . . . . . . . . . . . .	Byte	 00000080 _DATA	
sRdp2  . . . . . . . . . . . . .	Byte	 00000056 _DATA	
sRdp . . . . . . . . . . . . . .	Byte	 00000046 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	DWord	 00003E2A _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
y  . . . . . . . . . . . . . . .	DWord	 00003E2E _DATA	

	   0 Warnings
	   0 Errors
