Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/25/19 00:35:04
Animation exampl					     Page 1 - 1


				TITLE Animation example
				;; http://stackoverflow.com/questions/34217344/clear-screen-without-interrupt

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000002			CHARTYPE UNION
 00000000  0000				UnicodeChar    WORD ?
					AsciiChar      DB ?
				CHARTYPE ENDS

 00000004			CHAR_INFO STRUCT
 00000000  0000				Char          CHARTYPE <>
 00000002  0000				Attributes    WORD ?
				CHAR_INFO ENDS

 00000009			OBSTACULO_FASE STRUCT
 00000000  00				Movimento	  BYTE ? ;//0 estatico, 1 cima, 2 baixo, 3 direita, 4 esquerda
 00000001  00000000			X			  DWORD ? ;//Posicao x
 00000005  00000000			Y			  DWORD ? ;//Posicao y
				OBSTACULO_FASE ENDS

 = WriteConsoleOutputA		WriteConsoleOutput EQU <WriteConsoleOutputA>

				WriteConsoleOutput PROTO,
				hConsoleOutput : HANDLE,
				    lpBuffer : PTR CHAR_INFO,
				    dwBufferSize : COORD,
				    dwBufferCoord : COORD,
					lpWriteRegion : PTR SMALL_RECT

				CharToBuffer PROTO,
					bufx: DWORD,
					bufy: DWORD,
					char: WORD,
					cor: WORD

				RenderScene PROTO,
				    posx: DWORD,
				    posy: DWORD

				ChecaColisao PROTO,
				    px: DWORD,
				    py: DWORD

				MovimentaJogador PROTO, 
					px: DWORD,
					py: DWORD

				AtualizaFase PROTO, 
					pFase: DWORD,
					cFase: WORD

				AtualizaObstaculo PROTO,
					pObstaculo: DWORD

 00000000			.data
 = 00000078				COLS = 120; number of columns;//Quantidade de colunas do mapa
 = 0000001E				ROWS = 30; number of rows;//Quantidade de linhas do mapa
 = 0000006F				COR_OBSTACULO = 6Fh;//Cor dos elementos do buffer
 = 00000060				COR_FUNDO = 60h
 = 0000006B				COR_OBJETIVO = 6Bh
 = 00000064				COR_PERSONAGEM = 64h
 = 00000020				ELEMENTO_FUNDO = ' '
 = 00000023				ELEMENTO_OBSTACULO = '#'
 = 0000004F				ELEMENTO_OBJETIVO = 'O'
 = 00000077				INI_X = COLS - 1
 = 0000000F				INI_Y = 15


 00000000 01 00000005			fase1 OBSTACULO_FASE <1d, 5d, 15d>, <2d, 13d, 15d>, <1d, 15d, 15d>, <2d, 21d, 15d>, <1d, 25d, 15d>, <2d, 33d, 15d>,
	   0000000F 02
	   0000000D
	   0000000F 01
	   0000000F
	   0000000F 02
	   00000015
	   0000000F 01
	   00000019
	   0000000F 02
	   00000021
	   0000000F 01
	   00000026
	   0000000F 02
	   00000028
	   0000000F 02
	   0000004D
	   0000000F 01
	   0000004B
	   0000000F 02
	   00000057
	   0000000F 01
	   00000059
	   0000000F 02
	   0000005F
	   0000000F 01
	   00000063
	   0000000F 02
	   00000067
	   0000000F 01
	   0000006E
	   0000000F
						<1d, 38d, 15d>, <2d, 40d, 15d>, <2d, 77d, 15d>, <1d, 75d, 15d>, <2d, 87d, 15d>, <1d, 89d, 15d>, <2d, 95d, 15d>,
						<1d, 99d, 15d>, <2d, 103d, 15d>, <1d, 110d, 15d>
 00000090 01 00000005			fase2 OBSTACULO_FASE <1d, 5d, 15d>, <2d, 6d, 15d>, <1d, 7d, 15d>, <2d, 8d, 15d>, <1d, 9d, 15d>, <2d, 10d, 15d>,
	   0000000F 02
	   00000006
	   0000000F 01
	   00000007
	   0000000F 02
	   00000008
	   0000000F 01
	   00000009
	   0000000F 02
	   0000000A
	   0000000F 01
	   00000039
	   00000008 02
	   0000003A
	   00000008 01
	   0000003B
	   00000008 02
	   0000003C
	   00000008 01
	   0000003D
	   00000008 02
	   0000003E
	   00000008 01
	   00000069
	   00000019 02
	   0000006A
	   00000019 01
	   0000006B
	   00000019 02
	   0000006C
	   00000019 01
	   0000006D
	   00000019 02
	   0000006E
	   00000019
						<1d, 57d, 8d>, <2d, 58d, 8d>, <1d, 59d, 8d>, <2d, 60d, 8d>, <1d, 61d, 8d>, <2d, 62d, 8d>,
						<1d, 105d, 25d>, <2d, 106d, 25d>, <1d, 107d, 25d>, <2d, 108d, 25d>, <1d, 109d, 25d>, <2d, 110d, 25d>

 00000132 00000000 R			fases DWORD OFFSET fase1, OFFSET fase2
	   00000090 R

 0000013A 00000000		    console HANDLE 0
 0000013E  00000E10 [		    buffer CHAR_INFO ROWS * COLS DUP(<<ELEMENTO_FUNDO>, COR_FUNDO>)
	    0020 0060
	   ]
 0000397E 0078 001E		    bufferSize COORD <COLS, ROWS>
 00003982 0000 0000		    bufferCoord COORD <0, 0>
 00003986 0000 0000 0077	    region SMALL_RECT <0, 0, COLS - 1, ROWS - 1>
	   001D

 0000398E 00000077		    x DWORD INI_X; current position
 00003992 0000000F		    y DWORD INI_Y; of the figure
 00003996 00FE			    character WORD 0FEh ;//Personagem principal

 00000000			.code
 00000000			main PROC
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 0000013A R	    mov console, eax; save console handle

 0000000C				ANIMATION:
				    invoke RenderScene, x, y
 0000000C  FF 35 00003992 R *	    push   y
 00000012  FF 35 0000398E R *	    push   x
 00000018  E8 00000216	   *	    call   RenderScene
					invoke MovimentaJogador, OFFSET x, OFFSET y
 0000001D  68 00003992 R   *	    push   dword  ptr OFFSET FLAT: y
 00000022  68 0000398E R   *	    push   dword  ptr OFFSET FLAT: x
 00000027  E8 00000225	   *	    call   MovimentaJogador
				    invoke ChecaColisao, x, y
 0000002C  FF 35 00003992 R *	    push   y
 00000032  FF 35 0000398E R *	    push   x
 00000038  E8 00000268	   *	    call   ChecaColisao
 0000003D  83 F8 00		    cmp eax, 0
 00000040  74 19		    jz CONTINUE
 00000042  83 F8 01		    cmp eax, 1
 00000045  EB 00		    jmp RESTART
				    ;jmp PROXIMA_FASE

 00000047				RESTART:
 00000047  C7 05 0000398E R	    mov x, INI_X
	   00000077
 00000051  C7 05 00003992 R	    mov y, INI_Y
	   0000000F

 0000005B				CONTINUE:
					INVOKE CharToBuffer, x, y, character, COR_PERSONAGEM
 0000005B  6A 64	   *	    push   +000000064h
 0000005D  83 EC 02	   *	    sub    esp, 002h
 00000060  66| FF 35
	   00003996 R	   *	    push   character
 00000067  FF 35 00003992 R *	    push   y
 0000006D  FF 35 0000398E R *	    push   x
 00000073  E8 000000C3	   *	    call   CharToBuffer
				    invoke WriteConsoleOutput, console,
				    ADDR buffer, bufferSize, bufferCoord, ADDR region
 00000078  68 00003986 R   *	    push   OFFSET region
 0000007D  FF 35 00003982 R *	    push   dword  ptr bufferCoord
 00000083  FF 35 0000397E R *	    push   dword  ptr bufferSize
 00000089  68 0000013E R   *	    push   OFFSET buffer
 0000008E  FF 35 0000013A R *	    push   console
 00000094  E8 00000000 E   *	    call   WriteConsoleOutputA
 00000099  E9 FFFFFF6E		    jmp ANIMATION

				exit
 0000009E  6A 00	   *	    push   +000000000h
 000000A0  E8 00000000 E   *	    call   ExitProcess
 000000A5			main ENDP


 000000A5			ClearBuffer PROC USES eax ecx edx
 000000A5  50		   *	    push   eax
 000000A6  51		   *	    push   ecx
 000000A7  52		   *	    push   edx
 000000A8  33 C0		    xor eax, eax	;//EAX = 0

 000000AA				LINHA1:
 000000AA  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   0000013E R
	   0023
 000000B4  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   00000140 R
	   006F
 000000BE  40				inc eax
 000000BF  83 F8 78			cmp eax, COLS
 000000C2  7C E6			jl LINHA1

 000000C4				COLUNAS:
 000000C4  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   0000013E R
	   0023
 000000CE  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   00000140 R
	   006F
 000000D8  83 C0 77			add eax, COLS-1
 000000DB  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   0000013E R
	   0023
 000000E5  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   00000140 R
	   006F
 000000EF  40				inc eax
 000000F0  3D 00000D5E			cmp eax, (ROWS - 1)*(COLS - 2)
 000000F5  7C CD			jl COLUNAS

 000000F7				LINHANROWS:
 000000F7  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   0000013E R
	   0023
 00000101  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   00000140 R
	   006F
 0000010B  40				inc eax
 0000010C  3D 00000E10			cmp eax, ROWS*COLS
 00000111  7C E4			jl LINHANROWS

					;//Bloco do objetivo
 00000113  66| C7 05			mov buffer[(15 * COLS) * CHAR_INFO].Char, ELEMENTO_OBJETIVO
	   00001D5E R
	   004F
 0000011C  66| C7 05				mov buffer[(15 * COLS) * CHAR_INFO].Attributes, COR_OBJETIVO
	   00001D60 R
	   006B

					;//Remove o obstáculo da posição inicial
 00000125  66| C7 05			mov buffer[(16 * COLS - 1) * CHAR_INFO].Char, ELEMENTO_FUNDO
	   00001F3A R
	   0020
 0000012E  66| C7 05			mov buffer[(16 * COLS - 1) * CHAR_INFO].Attributes, COR_FUNDO
	   00001F3C R
	   0060


				    ret
 00000137  5A		   *	    pop    edx
 00000138  59		   *	    pop    ecx
 00000139  58		   *	    pop    eax
 0000013A  C3		   *	    ret    00000h
 0000013B			ClearBuffer ENDP


 0000013B			CharToBuffer PROC USES eax edx bufx: DWORD, bufy: DWORD, char: WORD, cor: WORD
 0000013B  55		   *	    push   ebp
 0000013C  8B EC	   *	    mov    ebp, esp
 0000013E  50		   *	    push   eax
 0000013F  52		   *	    push   edx
 00000140  8B 45 0C		    mov eax, bufy
 00000143  BA 00000078		    mov edx, COLS
 00000148  F7 E2		    mul edx
 0000014A  03 45 08		    add eax, bufx
 0000014D  66| 8B 55 10		    mov dx, char
 00000151  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Char, dx
	   0000013E R
 00000159  66| 8B 55 14			mov dx, cor
 0000015D  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Attributes, dx
	   00000140 R
				    ret
 00000165  5A		   *	    pop    edx
 00000166  58		   *	    pop    eax
 00000167  C9		   *	    leave  
 00000168  C2 0010	   *	    ret    00010h
 0000016B			CharToBuffer ENDP

 0000016B			AtualizaFase PROC USES eax ecx edx pFase: DWORD, cFase: WORD
 0000016B  55		   *	    push   ebp
 0000016C  8B EC	   *	    mov    ebp, esp
 0000016E  50		   *	    push   eax
 0000016F  51		   *	    push   ecx
 00000170  52		   *	    push   edx
 00000171  8B 45 08			mov eax, pFase
 00000174  8B 4D 0C			mov ecx, DWORD PTR cFase

 00000177				ATUALIZACAO:
					INVOKE CharToBuffer, DWORD PTR (OBSTACULO_FASE PTR [eax]).X, DWORD PTR (OBSTACULO_FASE PTR [eax]).Y, ELEMENTO_FUNDO, COR_FUNDO ;//Limpa a posição antiga
 00000177  6A 60	   *	    push   +000000060h
 00000179  6A 20	   *	    push   +000000020h
 0000017B  FF 70 05	   *	    push   dword  ptr [eax]+000000005h
 0000017E  FF 70 01	   *	    push   dword  ptr [eax]+000000001h
 00000181  E8 FFFFFFB5	   *	    call   CharToBuffer
					INVOKE AtualizaObstaculo, eax ;//Atualiza a posição do obstáculo
 00000186  50		   *	    push   eax
 00000187  E8 0000001B	   *	    call   AtualizaObstaculo
					INVOKE CharToBuffer, (OBSTACULO_FASE PTR [eax]).X, DWORD PTR (OBSTACULO_FASE PTR [eax]).Y, ELEMENTO_OBSTACULO, COR_OBSTACULO
 0000018C  6A 6F	   *	    push   +00000006Fh
 0000018E  6A 23	   *	    push   +000000023h
 00000190  FF 70 05	   *	    push   dword  ptr [eax]+000000005h
 00000193  FF 70 01	   *	    push   dword  ptr [eax]+000000001h
 00000196  E8 FFFFFFA0	   *	    call   CharToBuffer
 0000019B  83 C0 09			add eax, TYPE OBSTACULO_FASE
 0000019E  E2 D7			loop ATUALIZACAO

					ret
 000001A0  5A		   *	    pop    edx
 000001A1  59		   *	    pop    ecx
 000001A2  58		   *	    pop    eax
 000001A3  C9		   *	    leave  
 000001A4  C2 0008	   *	    ret    00008h
 000001A7			AtualizaFase ENDP

 000001A7			AtualizaObstaculo PROC USES eax edx ecx ebx esi pObstaculo: DWORD

 000001A7  55		   *	    push   ebp
 000001A8  8B EC	   *	    mov    ebp, esp
 000001AA  50		   *	    push   eax
 000001AB  52		   *	    push   edx
 000001AC  51		   *	    push   ecx
 000001AD  53		   *	    push   ebx
 000001AE  56		   *	    push   esi
 000001AF  8B 55 08			mov edx, pObstaculo

 000001B2  8B 5A 01			mov ebx, DWORD PTR(OBSTACULO_FASE PTR[edx]).X
 000001B5  8B 4A 05			mov ecx, DWORD PTR(OBSTACULO_FASE PTR[edx]).Y
 000001B8  0F B6 32			movzx esi, BYTE PTR (OBSTACULO_FASE PTR [edx]).Movimento
 000001BB  83 FE 00			cmp esi, 0
 000001BE  74 14			jz case0
 000001C0  83 FE 01			cmp esi, 1
 000001C3  74 11			jz case1
 000001C5  83 FE 02			cmp esi, 2
 000001C8  74 20			jz case2
 000001CA  83 FE 03			cmp esi, 3
 000001CD  74 2F			jz case3
 000001CF  83 FE 04			cmp esi, 4
 000001D2  74 3E			jz case4


 000001D4				case0:
 000001D4  EB 4E			jmp FIM

 000001D6				case1:
 000001D6  41				inc ecx
					INVOKE ChecaColisao, ebx, ecx
 000001D7  51		   *	    push   ecx
 000001D8  53		   *	    push   ebx
 000001D9  E8 000000C7	   *	    call   ChecaColisao
 000001DE  83 F8 00			cmp eax, 0
 000001E1  75 02			jnz INVERTEY

 000001E3  EB 3F			jmp FIM

 000001E5					INVERTEY:
 000001E5  C6 02 02				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 02h
 000001E8  EB 3A				jmp FIM

 000001EA				case2:
 000001EA  49				dec ecx
					INVOKE ChecaColisao, ebx, ecx
 000001EB  51		   *	    push   ecx
 000001EC  53		   *	    push   ebx
 000001ED  E8 000000B3	   *	    call   ChecaColisao
 000001F2  83 F8 00			cmp eax, 0
 000001F5  75 02			jnz INVERTEY2

 000001F7  EB 2B			jmp FIM

 000001F9					INVERTEY2:
 000001F9  C6 02 01				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 01h
 000001FC  EB 26				jmp FIM

 000001FE				case3:
 000001FE  43				inc ebx
					INVOKE ChecaColisao, ebx, ecx
 000001FF  51		   *	    push   ecx
 00000200  53		   *	    push   ebx
 00000201  E8 0000009F	   *	    call   ChecaColisao
 00000206  83 F8 00			cmp eax, 0
 00000209  75 02			jnz INVERTEX

 0000020B  EB 17			jmp FIM

 0000020D					INVERTEX:
 0000020D  C6 02 04				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 04h
 00000210  EB 12				jmp FIM

 00000212				case4:
 00000212  4B				dec ebx
					INVOKE ChecaColisao, ebx, ecx
 00000213  51		   *	    push   ecx
 00000214  53		   *	    push   ebx
 00000215  E8 0000008B	   *	    call   ChecaColisao
 0000021A  83 F8 00			cmp eax, 0
 0000021D  75 02			jnz INVERTEX2

 0000021F  EB 03			jmp FIM

 00000221					INVERTEX2:
 00000221  C6 02 03				mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 03h


 00000224				FIM:
 00000224  89 5A 01			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 00000227  89 4A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
					ret
 0000022A  5E		   *	    pop    esi
 0000022B  5B		   *	    pop    ebx
 0000022C  59		   *	    pop    ecx
 0000022D  5A		   *	    pop    edx
 0000022E  58		   *	    pop    eax
 0000022F  C9		   *	    leave  
 00000230  C2 0004	   *	    ret    00004h
 00000233			AtualizaObstaculo ENDP

 00000233			RenderScene PROC USES eax edx ecx posx: DWORD, posy: DWORD
 00000233  55		   *	    push   ebp
 00000234  8B EC	   *	    mov    ebp, esp
 00000236  50		   *	    push   eax
 00000237  52		   *	    push   edx
 00000238  51		   *	    push   ecx
 00000239  E8 FFFFFE67		    call ClearBuffer ;//Grid padrão do mapa
					INVOKE AtualizaFase, OFFSET fase2, LENGTHOF fase2
 0000023E  6A 12	   *	    push   +000000012h
 00000240  68 00000090 R   *	    push   dword  ptr OFFSET FLAT: fase2
 00000245  E8 FFFFFF21	   *	    call   AtualizaFase
				    ret
 0000024A  59		   *	    pop    ecx
 0000024B  5A		   *	    pop    edx
 0000024C  58		   *	    pop    eax
 0000024D  C9		   *	    leave  
 0000024E  C2 0008	   *	    ret    00008h

 00000251			RenderScene ENDP
exemplo.asm(265) : warning A6004:procedure argument or local not referenced : posx
exemplo.asm(265) : warning A6004:procedure argument or local not referenced : posy

 00000251			MovimentaJogador PROC USES eax px: DWORD, py: DWORD

 00000251  55		   *	    push   ebp
 00000252  8B EC	   *	    mov    ebp, esp
 00000254  50		   *	    push   eax
 00000255  8B 55 0C			mov edx, py
 00000258  8B 4D 08			mov ecx, px

 0000025B  B8 00000019			mov eax, 25
 00000260  E8 00000000 E		call Delay
 00000265  E8 00000000 E		call ReadKey
 0000026A  74 34			jz RESUME

 0000026C  8B 55 0C			mov edx, py ;//Sobrescrevendo edx com posy; ReadKey altera EDX

					INVOKE CharToBuffer, [ecx], [edx], ELEMENTO_FUNDO, COR_FUNDO
 0000026F  6A 60	   *	    push   +000000060h
 00000271  6A 20	   *	    push   +000000020h
 00000273  FF 32	   *	    push   dword  ptr [edx]
 00000275  FF 31	   *	    push   dword  ptr [ecx]
 00000277  E8 FFFFFEBF	   *	    call   CharToBuffer

 0000027C  80 FC 50			cmp ah, 50h
 0000027F  74 1D			jz INCREMENTO_Y ;//Cima
 00000281  80 FC 48			cmp ah, 48h
 00000284  74 0C			jz DECREMENTO_Y ;//Baixo
 00000286  80 FC 4D			cmp ah, 4Dh
 00000289  74 0F			jz INCREMENTO_X ;//Direita
 0000028B  80 FC 4B			cmp ah, 4Bh
 0000028E  74 06			jz DECREMENTO_X ;//Esquerda
 00000290  EB 0E			jmp RESUME

 00000292				DECREMENTO_Y :
 00000292  FF 0A			dec DWORD PTR [edx]
 00000294  EB 0A			jmp RESUME

 00000296				DECREMENTO_X :
 00000296  FF 09			dec DWORD PTR[ecx]
 00000298  EB 06			jmp RESUME

 0000029A				INCREMENTO_X :
 0000029A  FF 01			inc DWORD PTR[ecx]
 0000029C  EB 02			jmp RESUME

 0000029E				INCREMENTO_Y :
 0000029E  FF 02			inc DWORD PTR[edx]

 000002A0				RESUME:
					ret
 000002A0  58		   *	    pop    eax
 000002A1  C9		   *	    leave  
 000002A2  C2 0008	   *	    ret    00008h
 000002A5			MovimentaJogador ENDP

 000002A5			ChecaColisao PROC USES edx px: DWORD, py: DWORD
 000002A5  55		   *	    push   ebp
 000002A6  8B EC	   *	    mov    ebp, esp
 000002A8  52		   *	    push   edx
 000002A9  8B 45 0C		    mov eax, py
 000002AC  BA 00000078		    mov edx, COLS
 000002B1  F7 E2		    mul edx
 000002B3  03 45 08		    add eax, px
 000002B6  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, ' '
	   0000013E R 20
 000002BF  74 21		    jz NAO_COLIDIU
 000002C1  66| 81 3C 85		    cmp buffer[eax * CHAR_INFO].Char, 0FEh
	   0000013E R
	   00FE
 000002CB  74 15		    jz NAO_COLIDIU
 000002CD  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, '#'
	   0000013E R 23
 000002D6  74 11		    jz COLIDIU_OBSTACULO
 000002D8  B8 00000002		    mov eax, 2 ;Colidiu com o Objetivo!
 000002DD			RESUME2:
				    ret
 000002DD  5A		   *	    pop    edx
 000002DE  C9		   *	    leave  
 000002DF  C2 0008	   *	    ret    00008h

 000002E2			NAO_COLIDIU:
 000002E2  B8 00000000		    mov eax, 0
 000002E7  EB F4		    jmp RESUME2

 000002E9			COLIDIU_OBSTACULO:
 000002E9  B8 00000001		    mov eax, 1
 000002EE  EB ED		    jmp RESUME2


 000002F0			ChecaColisao ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/25/19 00:35:04
Animation exampl					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CHARTYPE . . . . . . . . . . . .	 00000002
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
CHAR_INFO  . . . . . . . . . . .	 00000004
  Char . . . . . . . . . . . . .	 00000000	 Word
  Attributes . . . . . . . . . .	 00000002	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
OBSTACULO_FASE . . . . . . . . .	 00000009
  Movimento  . . . . . . . . . .	 00000000	 Byte
  X  . . . . . . . . . . . . . .	 00000001	 DWord
  Y  . . . . . . . . . . . . . .	 00000005	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003998 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaFase . . . . . . . . . .	P Near	 0000016B _TEXT	Length= 0000003C Public STDCALL
  pFase  . . . . . . . . . . . .	DWord	 bp + 00000008
  cFase  . . . . . . . . . . . .	Word	 bp + 0000000C
  ATUALIZACAO  . . . . . . . . .	L Near	 00000177 _TEXT	
AtualizaObstaculo  . . . . . . .	P Near	 000001A7 _TEXT	Length= 0000008C Public STDCALL
  pObstaculo . . . . . . . . . .	DWord	 bp + 00000008
  case0  . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  case1  . . . . . . . . . . . .	L Near	 000001D6 _TEXT	
  INVERTEY . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  case2  . . . . . . . . . . . .	L Near	 000001EA _TEXT	
  INVERTEY2  . . . . . . . . . .	L Near	 000001F9 _TEXT	
  case3  . . . . . . . . . . . .	L Near	 000001FE _TEXT	
  INVERTEX . . . . . . . . . . .	L Near	 0000020D _TEXT	
  case4  . . . . . . . . . . . .	L Near	 00000212 _TEXT	
  INVERTEX2  . . . . . . . . . .	L Near	 00000221 _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 00000224 _TEXT	
CharToBuffer . . . . . . . . . .	P Near	 0000013B _TEXT	Length= 00000030 Public STDCALL
  bufx . . . . . . . . . . . . .	DWord	 bp + 00000008
  bufy . . . . . . . . . . . . .	DWord	 bp + 0000000C
  char . . . . . . . . . . . . .	Word	 bp + 00000010
  cor  . . . . . . . . . . . . .	Word	 bp + 00000014
ChecaColisao . . . . . . . . . .	P Near	 000002A5 _TEXT	Length= 0000004B Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  RESUME2  . . . . . . . . . . .	L Near	 000002DD _TEXT	
  NAO_COLIDIU  . . . . . . . . .	L Near	 000002E2 _TEXT	
  COLIDIU_OBSTACULO  . . . . . .	L Near	 000002E9 _TEXT	
ClearBuffer  . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 00000096 Public STDCALL
  LINHA1 . . . . . . . . . . . .	L Near	 000000AA _TEXT	
  COLUNAS  . . . . . . . . . . .	L Near	 000000C4 _TEXT	
  LINHANROWS . . . . . . . . . .	L Near	 000000F7 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MovimentaJogador . . . . . . . .	P Near	 00000251 _TEXT	Length= 00000054 Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  DECREMENTO_Y . . . . . . . . .	L Near	 00000292 _TEXT	
  DECREMENTO_X . . . . . . . . .	L Near	 00000296 _TEXT	
  INCREMENTO_X . . . . . . . . .	L Near	 0000029A _TEXT	
  INCREMENTO_Y . . . . . . . . .	L Near	 0000029E _TEXT	
  RESUME . . . . . . . . . . . .	L Near	 000002A0 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RenderScene  . . . . . . . . . .	P Near	 00000233 _TEXT	Length= 0000001E Public STDCALL
  posx . . . . . . . . . . . . .	DWord	 bp + 00000008
  posy . . . . . . . . . . . . .	DWord	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputA  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A5 Public STDCALL
  ANIMATION  . . . . . . . . . .	L Near	 0000000C _TEXT	
  RESTART  . . . . . . . . . . .	L Near	 00000047 _TEXT	
  CONTINUE . . . . . . . . . . .	L Near	 0000005B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000078h   
COR_FUNDO  . . . . . . . . . . .	Number	 00000060h   
COR_OBJETIVO . . . . . . . . . .	Number	 0000006Bh   
COR_OBSTACULO  . . . . . . . . .	Number	 0000006Fh   
COR_PERSONAGEM . . . . . . . . .	Number	 00000064h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ELEMENTO_FUNDO . . . . . . . . .	Number	 00000020h   
ELEMENTO_OBJETIVO  . . . . . . .	Number	 0000004Fh   
ELEMENTO_OBSTACULO . . . . . . .	Number	 00000023h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INI_X  . . . . . . . . . . . . .	Number	 00000077h   
INI_Y  . . . . . . . . . . . . .	Number	 0000000Fh   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 0000001Eh   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsoleOutput . . . . . . .	Text   	 WriteConsoleOutputA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferCoord  . . . . . . . . . .	COORD	 00003982 _DATA	
bufferSize . . . . . . . . . . .	COORD	 0000397E _DATA	
buffer . . . . . . . . . . . . .	CHAR_INFO  0000013E _DATA	
character  . . . . . . . . . . .	Word	 00003996 _DATA	
console  . . . . . . . . . . . .	DWord	 0000013A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fase1  . . . . . . . . . . . . .	OBSTACULO_FASE  00000000 _DATA	
fase2  . . . . . . . . . . . . .	OBSTACULO_FASE  00000090 _DATA	
fases  . . . . . . . . . . . . .	DWord	 00000132 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
region . . . . . . . . . . . . .	SMALL_RECT  00003986 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	DWord	 0000398E _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
y  . . . . . . . . . . . . . . .	DWord	 00003992 _DATA	

	   2 Warnings
	   0 Errors
