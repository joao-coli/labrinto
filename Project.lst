Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/24/19 22:52:52
Animation exampl					     Page 1 - 1


				TITLE Animation example
				;; http://stackoverflow.com/questions/34217344/clear-screen-without-interrupt

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000002			CHARTYPE UNION
 00000000  0000				UnicodeChar    WORD ?
					AsciiChar      DB ?
				CHARTYPE ENDS

 00000004			CHAR_INFO STRUCT
 00000000  0000				Char          CHARTYPE <>
 00000002  0000				Attributes    WORD ?
				CHAR_INFO ENDS

 0000000D			OBSTACULO_FASE STRUCT
 00000000  0000 0000			Base		  CHAR_INFO <>
 00000004  00				Movimento	  BYTE ? ;//0 estatico, 1 cima, 2 baixo, 3 direita, 4 esquerda
 00000005  00000000			X			  DWORD ? ;//Posicao x
 00000009  00000000			Y			  DWORD ? ;//Posicao y
				OBSTACULO_FASE ENDS

 = WriteConsoleOutputA		WriteConsoleOutput EQU <WriteConsoleOutputA>

				WriteConsoleOutput PROTO,
				hConsoleOutput : HANDLE,
				    lpBuffer : PTR CHAR_INFO,
				    dwBufferSize : COORD,
				    dwBufferCoord : COORD,
					lpWriteRegion : PTR SMALL_RECT

				CharToBuffer PROTO,
					bufx: DWORD,
					bufy: DWORD,
					char: WORD,
					cor: WORD

				RenderScene PROTO,
				    posx: DWORD,
				    posy: DWORD

				ChecaColisao PROTO,
				    px: DWORD,
				    py: DWORD

				MovimentaJogador PROTO, 
					px: DWORD,
					py: DWORD

				AtualizaFase PROTO, 
					pFase: DWORD,
					cFase: WORD

				AtualizaObstaculo PROTO,
					pObstaculo: DWORD

 00000000			.data
 = 00000078				COLS = 120; number of columns;//Quantidade de colunas do mapa
 = 0000001E				ROWS = 30; number of rows;//Quantidade de linhas do mapa
 = 0000006F				COR_OBSTACULO = 6Fh;//Cor dos elementos do buffer
 = 00000060				COR_FUNDO = 60h
 = 0000006B				COR_OBJETIVO = 6Bh
 = 00000064				COR_PERSONAGEM = 64h
 = 00000020				ELEMENTO_FUNDO = ' '
 = 00000023				ELEMENTO_OBSTACULO = '#'
 = 0000004F				ELEMENTO_OBJETIVO = 'O'
 = 00000077				INI_X = COLS - 1
 = 0000000F				INI_Y = 15


 00000000 0023 006F 01			fase1 OBSTACULO_FASE <<<ELEMENTO_OBSTACULO>, COR_OBSTACULO>, 1d, 5d, 15d>,
	   00000005
	   0000000F 0023
	   006F 02
	   00000006
	   0000000F 0023
	   006F 01
	   00000007
	   0000000F 0023
	   006F 02
	   00000008
	   0000000F
						<<<ELEMENTO_OBSTACULO>, COR_OBSTACULO>, 2d, 6d, 15d>,
						<<<ELEMENTO_OBSTACULO>, COR_OBSTACULO>, 1d, 7d, 15d>,
						<<<ELEMENTO_OBSTACULO>, COR_OBSTACULO>, 2d, 8d, 15d>

 00000034 00000000		    console HANDLE 0
 00000038  00000E10 [		    buffer CHAR_INFO ROWS * COLS DUP(<<ELEMENTO_FUNDO>, COR_FUNDO>)
	    0020 0060
	   ]
 00003878 0078 001E		    bufferSize COORD <COLS, ROWS>
 0000387C 0000 0000		    bufferCoord COORD <0, 0>
 00003880 0000 0000 0077	    region SMALL_RECT <0, 0, COLS - 1, ROWS - 1>
	   001D

 00003888 00000077		    x DWORD INI_X; current position
 0000388C 0000000F		    y DWORD INI_Y; of the figure
 00003890 00FE			    character WORD 0FEh ;//Personagem principal

 00000000			.code
 00000000			main PROC
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 00000034 R	    mov console, eax; save console handle

 0000000C				ANIMATION:
 0000000C  51			    push ecx
				    invoke RenderScene, x, y
 0000000D  FF 35 0000388C R *	    push   y
 00000013  FF 35 00003888 R *	    push   x
 00000019  E8 0000024A	   *	    call   RenderScene
					invoke MovimentaJogador, OFFSET x, OFFSET y
 0000001E  68 0000388C R   *	    push   dword  ptr OFFSET FLAT: y
 00000023  68 00003888 R   *	    push   dword  ptr OFFSET FLAT: x
 00000028  E8 00000259	   *	    call   MovimentaJogador
				    invoke ChecaColisao, x, y
 0000002D  FF 35 0000388C R *	    push   y
 00000033  FF 35 00003888 R *	    push   x
 00000039  E8 0000029C	   *	    call   ChecaColisao
 0000003E  83 F8 00		    cmp eax, 0
 00000041  74 19		    jz CONTINUE
 00000043  83 F8 01		    cmp eax, 1
 00000046  EB 00		    jmp RESTART
				    ;jmp PROXIMA_FASE

 00000048				RESTART:
 00000048  C7 05 00003888 R	    mov x, INI_X
	   00000077
 00000052  C7 05 0000388C R	    mov y, INI_Y
	   0000000F

 0000005C				CONTINUE:
					INVOKE CharToBuffer, x, y, character, COR_PERSONAGEM
 0000005C  6A 64	   *	    push   +000000064h
 0000005E  83 EC 02	   *	    sub    esp, 002h
 00000061  66| FF 35
	   00003890 R	   *	    push   character
 00000068  FF 35 0000388C R *	    push   y
 0000006E  FF 35 00003888 R *	    push   x
 00000074  E8 000000CB	   *	    call   CharToBuffer
				    invoke WriteConsoleOutput, console,
				    ADDR buffer, bufferSize, bufferCoord, ADDR region
 00000079  68 00003880 R   *	    push   OFFSET region
 0000007E  FF 35 0000387C R *	    push   dword  ptr bufferCoord
 00000084  FF 35 00003878 R *	    push   dword  ptr bufferSize
 0000008A  68 00000038 R   *	    push   OFFSET buffer
 0000008F  FF 35 00000034 R *	    push   console
 00000095  E8 00000000 E   *	    call   WriteConsoleOutputA
				    INVOKE Sleep, 10; delay between frames
 0000009A  6A 0A	   *	    push   +00000000Ah
 0000009C  E8 00000000 E   *	    call   Sleep
 000000A1  59			    pop ecx
 000000A2  E9 FFFFFF65		    jmp ANIMATION

				exit
 000000A7  6A 00	   *	    push   +000000000h
 000000A9  E8 00000000 E   *	    call   ExitProcess
 000000AE			main ENDP


 000000AE			ClearBuffer PROC USES eax ecx edx
 000000AE  50		   *	    push   eax
 000000AF  51		   *	    push   ecx
 000000B0  52		   *	    push   edx
 000000B1  33 C0		    xor eax, eax	;//EAX = 0

 000000B3				LINHA1:
 000000B3  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   00000038 R
	   0023
 000000BD  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   0000003A R
	   006F
 000000C7  40				inc eax
 000000C8  83 F8 78			cmp eax, COLS
 000000CB  7C E6			jl LINHA1

 000000CD				COLUNAS:
 000000CD  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   00000038 R
	   0023
 000000D7  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   0000003A R
	   006F
 000000E1  83 C0 77			add eax, COLS-1
 000000E4  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   00000038 R
	   0023
 000000EE  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   0000003A R
	   006F
 000000F8  40				inc eax
 000000F9  3D 00000D5E			cmp eax, (ROWS - 1)*(COLS - 2)
 000000FE  7C CD			jl COLUNAS

 00000100				LINHANROWS:
 00000100  66| C7 04 85			mov buffer[eax * CHAR_INFO].Char, ELEMENTO_OBSTACULO
	   00000038 R
	   0023
 0000010A  66| C7 04 85			mov buffer[eax * CHAR_INFO].Attributes, COR_OBSTACULO
	   0000003A R
	   006F
 00000114  40				inc eax
 00000115  3D 00000E10			cmp eax, ROWS*COLS
 0000011A  7C E4			jl LINHANROWS

					;//Bloco do objetivo
 0000011C  66| C7 05			mov buffer[(15 * COLS) * CHAR_INFO].Char, ELEMENTO_OBJETIVO
	   00001C58 R
	   004F
 00000125  66| C7 05				mov buffer[(15 * COLS) * CHAR_INFO].Attributes, COR_OBJETIVO
	   00001C5A R
	   006B

					;//Remove o obstáculo da posição inicial
 0000012E  66| C7 05			mov buffer[(16 * COLS - 1) * CHAR_INFO].Char, ELEMENTO_FUNDO
	   00001E34 R
	   0020
 00000137  66| C7 05			mov buffer[(16 * COLS - 1) * CHAR_INFO].Attributes, COR_FUNDO
	   00001E36 R
	   0060


				    ret
 00000140  5A		   *	    pop    edx
 00000141  59		   *	    pop    ecx
 00000142  58		   *	    pop    eax
 00000143  C3		   *	    ret    00000h
 00000144			ClearBuffer ENDP


 00000144			CharToBuffer PROC USES eax edx bufx: DWORD, bufy: DWORD, char: WORD, cor: WORD
 00000144  55		   *	    push   ebp
 00000145  8B EC	   *	    mov    ebp, esp
 00000147  50		   *	    push   eax
 00000148  52		   *	    push   edx
 00000149  8B 45 0C		    mov eax, bufy
 0000014C  BA 00000078		    mov edx, COLS
 00000151  F7 E2		    mul edx
 00000153  03 45 08		    add eax, bufx
 00000156  66| 8B 55 10		    mov dx, char
 0000015A  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Char, dx
	   00000038 R
 00000162  66| 8B 55 14			mov dx, cor
 00000166  66| 89 14 85		    mov buffer[eax * CHAR_INFO].Attributes, dx
	   0000003A R
				    ret
 0000016E  5A		   *	    pop    edx
 0000016F  58		   *	    pop    eax
 00000170  C9		   *	    leave  
 00000171  C2 0010	   *	    ret    00010h
 00000174			CharToBuffer ENDP

 00000174			AtualizaFase PROC USES eax ecx edx pFase: DWORD, cFase: WORD
 00000174  55		   *	    push   ebp
 00000175  8B EC	   *	    mov    ebp, esp
 00000177  50		   *	    push   eax
 00000178  51		   *	    push   ecx
 00000179  52		   *	    push   edx
 0000017A  8B 45 08			mov eax, pFase
 0000017D  8B 4D 0C			mov ecx, DWORD PTR cFase

 00000180				ATUALIZACAO:
					INVOKE CharToBuffer, DWORD PTR (OBSTACULO_FASE PTR [eax]).X, DWORD PTR (OBSTACULO_FASE PTR [eax]).Y, ELEMENTO_FUNDO, COR_FUNDO ;//Limpa a posição antiga
 00000180  6A 60	   *	    push   +000000060h
 00000182  6A 20	   *	    push   +000000020h
 00000184  FF 70 09	   *	    push   dword  ptr [eax]+000000009h
 00000187  FF 70 05	   *	    push   dword  ptr [eax]+000000005h
 0000018A  E8 FFFFFFB5	   *	    call   CharToBuffer
					INVOKE AtualizaObstaculo, eax ;//Atualiza a posição do obstáculo
 0000018F  50		   *	    push   eax
 00000190  E8 0000001B	   *	    call   AtualizaObstaculo
					INVOKE CharToBuffer, (OBSTACULO_FASE PTR [eax]).X, DWORD PTR (OBSTACULO_FASE PTR [eax]).Y, ELEMENTO_OBSTACULO, COR_OBSTACULO
 00000195  6A 6F	   *	    push   +00000006Fh
 00000197  6A 23	   *	    push   +000000023h
 00000199  FF 70 09	   *	    push   dword  ptr [eax]+000000009h
 0000019C  FF 70 05	   *	    push   dword  ptr [eax]+000000005h
 0000019F  E8 FFFFFFA0	   *	    call   CharToBuffer
 000001A4  83 C0 0D			add eax, TYPE OBSTACULO_FASE
 000001A7  E2 D7			loop ATUALIZACAO

					ret
 000001A9  5A		   *	    pop    edx
 000001AA  59		   *	    pop    ecx
 000001AB  58		   *	    pop    eax
 000001AC  C9		   *	    leave  
 000001AD  C2 0008	   *	    ret    00008h
 000001B0			AtualizaFase ENDP

 000001B0			AtualizaObstaculo PROC USES eax edx ecx ebx esi pObstaculo: DWORD

 000001B0  55		   *	    push   ebp
 000001B1  8B EC	   *	    mov    ebp, esp
 000001B3  50		   *	    push   eax
 000001B4  52		   *	    push   edx
 000001B5  51		   *	    push   ecx
 000001B6  53		   *	    push   ebx
 000001B7  56		   *	    push   esi
 000001B8  8B 55 08			mov edx, pObstaculo
 000001BB  0F B6 72 04			movzx esi, BYTE PTR (OBSTACULO_FASE PTR [edx]).Movimento
 000001BF  83 FE 00			cmp esi, 0
 000001C2  74 14			jz case0
 000001C4  83 FE 01			cmp esi, 1
 000001C7  74 14			jz case1
 000001C9  83 FE 02			cmp esi, 2
 000001CC  74 30			jz case2
 000001CE  83 FE 03			cmp esi, 3
 000001D1  74 4C			jz case3
 000001D3  83 FE 04			cmp esi, 4
 000001D6  74 68			jz case4

 000001D8				case0:
 000001D8  E9 00000082			jmp FIM

 000001DD				case1:
 000001DD  8B 5A 05			mov ebx, DWORD PTR (OBSTACULO_FASE PTR[edx]).X
 000001E0  8B 4A 09			mov ecx, DWORD PTR (OBSTACULO_FASE PTR[edx]).Y
 000001E3  41				inc ecx
					INVOKE ChecaColisao, ebx, ecx
 000001E4  51		   *	    push   ecx
 000001E5  53		   *	    push   ebx
 000001E6  E8 000000EF	   *	    call   ChecaColisao
 000001EB  83 F8 00			cmp eax, 0
 000001EE  75 08			jnz INVERTEY

 000001F0  89 5A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 000001F3  89 4A 09			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
 000001F6  EB 67			jmp FIM

 000001F8				INVERTEY:
 000001F8  C6 42 04 02			mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 02h
 000001FC  EB 61			jmp FIM

 000001FE				case2:
 000001FE  8B 5A 05			mov ebx, DWORD PTR (OBSTACULO_FASE PTR[edx]).X
 00000201  8B 4A 09			mov ecx, DWORD PTR (OBSTACULO_FASE PTR[edx]).Y
 00000204  49				dec ecx
					INVOKE ChecaColisao, ebx, ecx
 00000205  51		   *	    push   ecx
 00000206  53		   *	    push   ebx
 00000207  E8 000000CE	   *	    call   ChecaColisao
 0000020C  83 F8 00			cmp eax, 0
 0000020F  75 08			jnz INVERTEY2

 00000211  89 5A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 00000214  89 4A 09			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
 00000217  EB 46			jmp FIM

 00000219				INVERTEY2:
 00000219  C6 42 04 01			mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 01h
 0000021D  EB 40			jmp FIM

 0000021F				case3:
 0000021F  8B 5A 05			mov ebx, DWORD PTR (OBSTACULO_FASE PTR[edx]).X
 00000222  8B 4A 09			mov ecx, DWORD PTR (OBSTACULO_FASE PTR[edx]).Y
 00000225  43				inc ebx
					INVOKE ChecaColisao, ebx, ecx
 00000226  51		   *	    push   ecx
 00000227  53		   *	    push   ebx
 00000228  E8 000000AD	   *	    call   ChecaColisao
 0000022D  83 F8 00			cmp eax, 0
 00000230  75 08			jnz INVERTEX

 00000232  89 5A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 00000235  89 4A 09			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
 00000238  EB 25			jmp FIM

 0000023A				INVERTEX:
 0000023A  C6 42 04 04			mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 04h
 0000023E  EB 1F			jmp FIM

 00000240				case4:
 00000240  8B 5A 05			mov ebx, DWORD PTR (OBSTACULO_FASE PTR[edx]).X
 00000243  8B 4A 09			mov ecx, DWORD PTR (OBSTACULO_FASE PTR[edx]).Y
 00000246  4B				dec ebx
					INVOKE ChecaColisao, ebx, ecx
 00000247  51		   *	    push   ecx
 00000248  53		   *	    push   ebx
 00000249  E8 0000008C	   *	    call   ChecaColisao
 0000024E  83 F8 00			cmp eax, 0
 00000251  75 08			jnz INVERTEX2

 00000253  89 5A 05			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).X, ebx
 00000256  89 4A 09			mov DWORD PTR(OBSTACULO_FASE PTR[edx]).Y, ecx
 00000259  EB 04			jmp FIM

 0000025B				INVERTEX2:
 0000025B  C6 42 04 03			mov BYTE PTR (OBSTACULO_FASE PTR[edx]).Movimento, 03h


 0000025F				FIM:
					ret
 0000025F  5E		   *	    pop    esi
 00000260  5B		   *	    pop    ebx
 00000261  59		   *	    pop    ecx
 00000262  5A		   *	    pop    edx
 00000263  58		   *	    pop    eax
 00000264  C9		   *	    leave  
 00000265  C2 0004	   *	    ret    00004h
 00000268			AtualizaObstaculo ENDP

 00000268			RenderScene PROC USES eax edx ecx posx: DWORD, posy: DWORD
 00000268  55		   *	    push   ebp
 00000269  8B EC	   *	    mov    ebp, esp
 0000026B  50		   *	    push   eax
 0000026C  52		   *	    push   edx
 0000026D  51		   *	    push   ecx
 0000026E  E8 FFFFFE3B		    call ClearBuffer ;//Grid padrão do mapa
					INVOKE AtualizaFase, OFFSET fase1, LENGTHOF fase1
 00000273  6A 04	   *	    push   +000000004h
 00000275  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: fase1
 0000027A  E8 FFFFFEF5	   *	    call   AtualizaFase
				    ret
 0000027F  59		   *	    pop    ecx
 00000280  5A		   *	    pop    edx
 00000281  58		   *	    pop    eax
 00000282  C9		   *	    leave  
 00000283  C2 0008	   *	    ret    00008h

 00000286			RenderScene ENDP
exemplo.asm(275) : warning A6004:procedure argument or local not referenced : posx
exemplo.asm(275) : warning A6004:procedure argument or local not referenced : posy

 00000286			MovimentaJogador PROC USES eax px: DWORD, py: DWORD

 00000286  55		   *	    push   ebp
 00000287  8B EC	   *	    mov    ebp, esp
 00000289  50		   *	    push   eax
 0000028A  8B 55 0C			mov edx, py
 0000028D  8B 4D 08			mov ecx, px

 00000290  B8 00000032			mov eax, 50
 00000295  E8 00000000 E		call Delay
 0000029A  E8 00000000 E		call ReadKey
 0000029F  74 34			jz RESUME

 000002A1  8B 55 0C			mov edx, py ;//Sobrescrevendo edx com posy; ReadKey altera EDX

					INVOKE CharToBuffer, [ecx], [edx], ELEMENTO_FUNDO, COR_FUNDO
 000002A4  6A 60	   *	    push   +000000060h
 000002A6  6A 20	   *	    push   +000000020h
 000002A8  FF 32	   *	    push   dword  ptr [edx]
 000002AA  FF 31	   *	    push   dword  ptr [ecx]
 000002AC  E8 FFFFFE93	   *	    call   CharToBuffer

 000002B1  80 FC 50			cmp ah, 50h
 000002B4  74 1D			jz INCREMENTO_Y ;//Cima
 000002B6  80 FC 48			cmp ah, 48h
 000002B9  74 0C			jz DECREMENTO_Y ;//Baixo
 000002BB  80 FC 4D			cmp ah, 4Dh
 000002BE  74 0F			jz INCREMENTO_X ;//Direita
 000002C0  80 FC 4B			cmp ah, 4Bh
 000002C3  74 06			jz DECREMENTO_X ;//Esquerda
 000002C5  EB 0E			jmp RESUME

 000002C7				DECREMENTO_Y :
 000002C7  FF 0A			dec DWORD PTR [edx]
 000002C9  EB 0A			jmp RESUME

 000002CB				DECREMENTO_X :
 000002CB  FF 09			dec DWORD PTR[ecx]
 000002CD  EB 06			jmp RESUME

 000002CF				INCREMENTO_X :
 000002CF  FF 01			inc DWORD PTR[ecx]
 000002D1  EB 02			jmp RESUME

 000002D3				INCREMENTO_Y :
 000002D3  FF 02			inc DWORD PTR[edx]

 000002D5				RESUME:
					ret
 000002D5  58		   *	    pop    eax
 000002D6  C9		   *	    leave  
 000002D7  C2 0008	   *	    ret    00008h

 000002DA			MovimentaJogador ENDP

 000002DA			ChecaColisao PROC USES edx px: DWORD, py: DWORD
 000002DA  55		   *	    push   ebp
 000002DB  8B EC	   *	    mov    ebp, esp
 000002DD  52		   *	    push   edx
 000002DE  8B 45 0C		    mov eax, py
 000002E1  BA 00000078		    mov edx, COLS
 000002E6  F7 E2		    mul edx
 000002E8  03 45 08		    add eax, px
 000002EB  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, ' '
	   00000038 R 20
 000002F4  74 21		    jz NAO_COLIDIU
 000002F6  66| 81 3C 85		    cmp buffer[eax * CHAR_INFO].Char, 0FEh
	   00000038 R
	   00FE
 00000300  74 15		    jz NAO_COLIDIU
 00000302  66| 83 3C 85		    cmp buffer[eax * CHAR_INFO].Char, '#'
	   00000038 R 23
 0000030B  74 11		    jz COLIDIU_OBSTACULO
 0000030D  B8 00000002		    mov eax, 2 ;Colidiu com o Objetivo!
 00000312			RESUME2:
				    ret
 00000312  5A		   *	    pop    edx
 00000313  C9		   *	    leave  
 00000314  C2 0008	   *	    ret    00008h

 00000317			NAO_COLIDIU:
 00000317  B8 00000000		    mov eax, 0
 0000031C  EB F4		    jmp RESUME2

 0000031E			COLIDIU_OBSTACULO:
 0000031E  B8 00000001		    mov eax, 1
 00000323  EB ED		    jmp RESUME2


 00000325			ChecaColisao ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27031.1	    06/24/19 22:52:52
Animation exampl					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CHARTYPE . . . . . . . . . . . .	 00000002
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
CHAR_INFO  . . . . . . . . . . .	 00000004
  Char . . . . . . . . . . . . .	 00000000	 Word
  Attributes . . . . . . . . . .	 00000002	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
OBSTACULO_FASE . . . . . . . . .	 0000000D
  Base . . . . . . . . . . . . .	 00000000	 DWord
  Movimento  . . . . . . . . . .	 00000004	 Byte
  X  . . . . . . . . . . . . . .	 00000005	 DWord
  Y  . . . . . . . . . . . . . .	 00000009	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003892 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000325 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaFase . . . . . . . . . .	P Near	 00000174 _TEXT	Length= 0000003C Public STDCALL
  pFase  . . . . . . . . . . . .	DWord	 bp + 00000008
  cFase  . . . . . . . . . . . .	Word	 bp + 0000000C
  ATUALIZACAO  . . . . . . . . .	L Near	 00000180 _TEXT	
AtualizaObstaculo  . . . . . . .	P Near	 000001B0 _TEXT	Length= 000000B8 Public STDCALL
  pObstaculo . . . . . . . . . .	DWord	 bp + 00000008
  case0  . . . . . . . . . . . .	L Near	 000001D8 _TEXT	
  case1  . . . . . . . . . . . .	L Near	 000001DD _TEXT	
  INVERTEY . . . . . . . . . . .	L Near	 000001F8 _TEXT	
  case2  . . . . . . . . . . . .	L Near	 000001FE _TEXT	
  INVERTEY2  . . . . . . . . . .	L Near	 00000219 _TEXT	
  case3  . . . . . . . . . . . .	L Near	 0000021F _TEXT	
  INVERTEX . . . . . . . . . . .	L Near	 0000023A _TEXT	
  case4  . . . . . . . . . . . .	L Near	 00000240 _TEXT	
  INVERTEX2  . . . . . . . . . .	L Near	 0000025B _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 0000025F _TEXT	
CharToBuffer . . . . . . . . . .	P Near	 00000144 _TEXT	Length= 00000030 Public STDCALL
  bufx . . . . . . . . . . . . .	DWord	 bp + 00000008
  bufy . . . . . . . . . . . . .	DWord	 bp + 0000000C
  char . . . . . . . . . . . . .	Word	 bp + 00000010
  cor  . . . . . . . . . . . . .	Word	 bp + 00000014
ChecaColisao . . . . . . . . . .	P Near	 000002DA _TEXT	Length= 0000004B Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  RESUME2  . . . . . . . . . . .	L Near	 00000312 _TEXT	
  NAO_COLIDIU  . . . . . . . . .	L Near	 00000317 _TEXT	
  COLIDIU_OBSTACULO  . . . . . .	L Near	 0000031E _TEXT	
ClearBuffer  . . . . . . . . . .	P Near	 000000AE _TEXT	Length= 00000096 Public STDCALL
  LINHA1 . . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  COLUNAS  . . . . . . . . . . .	L Near	 000000CD _TEXT	
  LINHANROWS . . . . . . . . . .	L Near	 00000100 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MovimentaJogador . . . . . . . .	P Near	 00000286 _TEXT	Length= 00000054 Public STDCALL
  px . . . . . . . . . . . . . .	DWord	 bp + 00000008
  py . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  DECREMENTO_Y . . . . . . . . .	L Near	 000002C7 _TEXT	
  DECREMENTO_X . . . . . . . . .	L Near	 000002CB _TEXT	
  INCREMENTO_X . . . . . . . . .	L Near	 000002CF _TEXT	
  INCREMENTO_Y . . . . . . . . .	L Near	 000002D3 _TEXT	
  RESUME . . . . . . . . . . . .	L Near	 000002D5 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RenderScene  . . . . . . . . . .	P Near	 00000268 _TEXT	Length= 0000001E Public STDCALL
  posx . . . . . . . . . . . . .	DWord	 bp + 00000008
  posy . . . . . . . . . . . . .	DWord	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputA  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AE Public STDCALL
  ANIMATION  . . . . . . . . . .	L Near	 0000000C _TEXT	
  RESTART  . . . . . . . . . . .	L Near	 00000048 _TEXT	
  CONTINUE . . . . . . . . . . .	L Near	 0000005C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000078h   
COR_FUNDO  . . . . . . . . . . .	Number	 00000060h   
COR_OBJETIVO . . . . . . . . . .	Number	 0000006Bh   
COR_OBSTACULO  . . . . . . . . .	Number	 0000006Fh   
COR_PERSONAGEM . . . . . . . . .	Number	 00000064h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ELEMENTO_FUNDO . . . . . . . . .	Number	 00000020h   
ELEMENTO_OBJETIVO  . . . . . . .	Number	 0000004Fh   
ELEMENTO_OBSTACULO . . . . . . .	Number	 00000023h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INI_X  . . . . . . . . . . . . .	Number	 00000077h   
INI_Y  . . . . . . . . . . . . .	Number	 0000000Fh   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 0000001Eh   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsoleOutput . . . . . . .	Text   	 WriteConsoleOutputA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferCoord  . . . . . . . . . .	COORD	 0000387C _DATA	
bufferSize . . . . . . . . . . .	COORD	 00003878 _DATA	
buffer . . . . . . . . . . . . .	CHAR_INFO  00000038 _DATA	
character  . . . . . . . . . . .	Word	 00003890 _DATA	
console  . . . . . . . . . . . .	DWord	 00000034 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fase1  . . . . . . . . . . . . .	OBSTACULO_FASE  00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
region . . . . . . . . . . . . .	SMALL_RECT  00003880 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	DWord	 00003888 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
y  . . . . . . . . . . . . . . .	DWord	 0000388C _DATA	

	   2 Warnings
	   0 Errors
